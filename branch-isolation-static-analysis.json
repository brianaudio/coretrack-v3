{
  "timestamp": "2025-09-01T12:02:35.853Z",
  "securityScore": 0,
  "securityLevel": "CRITICAL",
  "statistics": {
    "totalFiles": 481,
    "queriesAnalyzed": 329,
    "branchFilteredQueries": 72,
    "unfilteratedQueries": 333,
    "locationIdReferences": 1681
  },
  "criticalVulnerabilities": [
    {
      "type": "CRITICAL",
      "description": "Firestore rules do not enforce locationId filtering",
      "category": "rules_missing_isolation",
      "file": "firestore.rules"
    },
    {
      "type": "CRITICAL",
      "description": "Firestore rules do not enforce locationId filtering",
      "category": "rules_missing_isolation",
      "file": "firestore.rules.secure"
    },
    {
      "type": "CRITICAL",
      "description": "Firestore rules do not enforce locationId filtering",
      "category": "rules_missing_isolation",
      "file": "firestore.rules.enhanced"
    },
    {
      "type": "CRITICAL",
      "description": "Unfiltered getDocs query - potential data leak",
      "category": "unfiltered_query",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 136,
      "code": "const snapshot = await getDocs(collection(db, 'tenants', tenantId, 'members'))",
      "match": "getDocs(collection(db, 'tenants', tenantId, 'members'))"
    },
    {
      "type": "CRITICAL",
      "description": "Unfiltered getDocs query - potential data leak",
      "category": "unfiltered_query",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 136,
      "code": "const snapshot = await getDocs(collection(db, 'tenants', tenantId, 'members'))",
      "match": "getDocs(collection(db, 'tenants', tenantId, 'members'))"
    },
    {
      "type": "CRITICAL",
      "description": "Unfiltered getDocs query - potential data leak",
      "category": "unfiltered_query",
      "file": "src/lib/migrations/fixMenuCosts.ts",
      "line": 14,
      "code": "const menuSnapshot = await getDocs(collection(db, 'tenants', tenantId, 'menuItems'))",
      "match": "getDocs(collection(db, 'tenants', tenantId, 'menuItems'))"
    },
    {
      "type": "CRITICAL",
      "description": "Unfiltered getDocs query - potential data leak",
      "category": "unfiltered_query",
      "file": "src/lib/migrations/fixMenuCosts.ts",
      "line": 18,
      "code": "const inventorySnapshot = await getDocs(collection(db, 'tenants', tenantId, 'inventory'))",
      "match": "getDocs(collection(db, 'tenants', tenantId, 'inventory'))"
    }
  ],
  "securityWarnings": [
    {
      "type": "HIGH",
      "description": "Firestore rules contain wildcard access patterns",
      "category": "rules_security",
      "file": "firestore.rules",
      "code": "match /{document=**} { allow ... }"
    },
    {
      "type": "HIGH",
      "description": "Firestore rules contain wildcard access patterns",
      "category": "rules_security",
      "file": "firestore.rules.secure",
      "code": "match /{document=**} { allow ... }"
    },
    {
      "type": "HIGH",
      "description": "Firestore rules contain wildcard access patterns",
      "category": "rules_security",
      "file": "firestore.rules.enhanced",
      "code": "match /{document=**} { allow ... }"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/addons.ts",
      "line": 67,
      "code": "const q = query(\n      addonsRef,\n      where('tenantId', '==', tenantId)",
      "match": "query(\n      addonsRef,\n      where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/addons.ts",
      "line": 69,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/analytics.ts",
      "line": 112,
      "code": "q = query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)",
      "match": "query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/analytics.ts",
      "line": 119,
      "code": "q = query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)",
      "match": "query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 154,
      "code": "return query(collectionRef, ...filters)",
      "match": "query(collectionRef, ...filters)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 327,
      "code": "const menuQuery = query(\n      collection(db, `tenants/${tenantId}/menuItems`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/menuItems`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 347,
      "code": "const posQuery = query(\n      collection(db, `tenants/${tenantId}/posItems`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/posItems`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 367,
      "code": "const inventoryQuery = query(\n      collection(db, `tenants/${tenantId}/inventory`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/inventory`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 387,
      "code": "const categoriesQuery = query(\n      collection(db, `tenants/${tenantId}/menuCategories`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/menuCategories`)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 329,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 349,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 369,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 389,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 132,
      "code": "const q = query(drawersRef, orderBy('name')",
      "match": "query(drawersRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 203,
      "code": "const q = query(methodsRef, orderBy('name')",
      "match": "query(methodsRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 315,
      "code": "q = query(\n        transactionsRef,\n        where('paymentMethodId', '==', paymentMethodId)",
      "match": "query(\n        transactionsRef,\n        where('paymentMethodId', '==', paymentMethodId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 321,
      "code": "q = query(transactionsRef, orderBy('timestamp', 'desc')",
      "match": "query(transactionsRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 376,
      "code": "q = query(\n        countsRef,\n        where('drawerId', '==', drawerId)",
      "match": "query(\n        countsRef,\n        where('drawerId', '==', drawerId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 382,
      "code": "q = query(countsRef, orderBy('timestamp', 'desc')",
      "match": "query(countsRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 500,
      "code": "const q = query(drawersRef, orderBy('name')",
      "match": "query(drawersRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 520,
      "code": "const q = query(transactionsRef, orderBy('timestamp', 'desc')",
      "match": "query(transactionsRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 576,
      "code": "const ordersQuery = query(\n        ordersCollection,\n        where('locationId', '==', locationId)",
      "match": "query(\n        ordersCollection,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/enhancedDataExplorerPOS.ts",
      "line": 60,
      "code": "getDocs(query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/enhancedDataExplorerPOS.ts",
      "line": 61,
      "code": "getDocs(query(posOrdersRef, orderBy('createdAt', 'desc')",
      "match": "query(posOrdersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 92,
      "code": "q = query(\n          expensesRef, \n          where('locationId', '==', locationId)",
      "match": "query(\n          expensesRef, \n          where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 110,
      "code": "const allQuery = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 130,
      "code": "const allQuery = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 147,
      "code": "q = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 177,
      "code": "const q = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 202,
      "code": "const q = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 308,
      "code": "const q = query(categoriesRef, orderBy('name')",
      "match": "query(categoriesRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 398,
      "code": "const q = query(\n      expensesRef,\n      where('date', '>=', Timestamp.fromDate(startDate)",
      "match": "query(\n      expensesRef,\n      where('date', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 424,
      "code": "const q = query(\n      expensesRef,\n      where('category', '==', category)",
      "match": "query(\n      expensesRef,\n      where('category', '==', category)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 66,
      "code": "const existingQuery = query(\n      posItemsRef, \n      where('name', '==', menuItem.name)",
      "match": "query(\n      posItemsRef, \n      where('name', '==', menuItem.name)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 124,
      "code": "const query_doc = query(posItemsRef, where('menuItemId', '==', menuItemId)",
      "match": "query(posItemsRef, where('menuItemId', '==', menuItemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 304,
      "code": "inventoryQuery = query(inventoryRef, where('locationId', '==', locationId)",
      "match": "query(inventoryRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 308,
      "code": "inventoryQuery = query(inventoryRef)",
      "match": "query(inventoryRef)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 572,
      "code": "const menuQuery = query(\n        menuItemsRef,\n        where('name', '==', posItemData.name)",
      "match": "query(\n        menuItemsRef,\n        where('name', '==', posItemData.name)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 777,
      "code": "const posQuery = query(posItemsRef, where('menuItemId', '==', menuItem.id)",
      "match": "query(posItemsRef, where('menuItemId', '==', menuItem.id)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 1025,
      "code": "const inventoryQuery = query(\n              inventoryRef,\n              where('name', '==', ingredient.inventoryItemName)",
      "match": "query(\n              inventoryRef,\n              where('name', '==', ingredient.inventoryItemName)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 124,
      "code": "const q = query(\n      inventoryRef, \n      where('locationId', '==', locationId)",
      "match": "query(\n      inventoryRef, \n      where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 146,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 172,
      "code": "const q = query(\n    inventoryRef, \n    where('locationId', '==', locationId)",
      "match": "query(\n    inventoryRef, \n    where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 690,
      "code": "q = query(\n        movementsRef,\n        where('itemId', '==', itemId)",
      "match": "query(\n        movementsRef,\n        where('itemId', '==', itemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 695,
      "code": "q = query(\n        movementsRef,\n        orderBy('timestamp', 'desc')",
      "match": "query(\n        movementsRef,\n        orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 734,
      "code": "const q = query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(hoursAgo)",
      "match": "query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(hoursAgo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 90,
      "code": "let inventoryQuery = query(inventoryRef)",
      "match": "query(inventoryRef)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 94,
      "code": "inventoryQuery = query(inventoryRef, where('locationId', '==', locationId)",
      "match": "query(inventoryRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 126,
      "code": "const movementsQuery = query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(daysAgo)",
      "match": "query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(daysAgo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryDeductionFix.ts",
      "line": 35,
      "code": "const posQuery = query(\n          posItemsRef,\n          where('name', '==', menuData.name)",
      "match": "query(\n          posItemsRef,\n          where('name', '==', menuData.name)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryVerification.ts",
      "line": 16,
      "code": "q = query(colRef, where('locationId', '==', locationId)",
      "match": "query(colRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 36,
      "code": "const q = query(\n    collection(db, 'locations')",
      "match": "query(\n    collection(db, 'locations')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 83,
      "code": "const inventoryQuery = query(\n    collection(db, 'locationInventory')",
      "match": "query(\n    collection(db, 'locationInventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 93,
      "code": "const analyticsQuery = query(\n    collection(db, 'locationAnalytics')",
      "match": "query(\n    collection(db, 'locationAnalytics')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 135,
      "code": "q = query(\n      collection(db, 'locationInventory')",
      "match": "query(\n      collection(db, 'locationInventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 141,
      "code": "q = query(\n      collection(db, 'locationInventory')",
      "match": "query(\n      collection(db, 'locationInventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 172,
      "code": "let q = query(\n    collection(db, 'locationAnalytics')",
      "match": "query(\n    collection(db, 'locationAnalytics')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 181,
      "code": "q = query(q, where('date', '>=', Timestamp.fromDate(startDate)",
      "match": "query(q, where('date', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 184,
      "code": "q = query(q, where('date', '<=', Timestamp.fromDate(endDate)",
      "match": "query(q, where('date', '<=', Timestamp.fromDate(endDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 206,
      "code": "const q = query(\n    collection(db, 'locations')",
      "match": "query(\n    collection(db, 'locations')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 38,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 208,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 644,
      "code": "const snapshot = await getDocs(query(templatesRef, orderBy('createdAt', 'desc')",
      "match": "query(templatesRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 766,
      "code": "const menuItemsQuery = query(menuItemsRef, where('templateInfo.templateId', '==', templateId)",
      "match": "query(menuItemsRef, where('templateInfo.templateId', '==', templateId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1067,
      "code": "const queryRef = query(itemsRef, where('locationId', '==', locationId)",
      "match": "query(itemsRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1318,
      "code": "const locationQuery = query(categoriesRef, where('locationId', '==', locationId)",
      "match": "query(categoriesRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1521,
      "code": "const q = query(recipesRef, where('menuItemId', '==', menuItemId)",
      "match": "query(recipesRef, where('menuItemId', '==', menuItemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuPOSSync.ts",
      "line": 49,
      "code": "const existingQuery = query(\n      posItemsRef,\n      where('menuItemId', '==', menuItem.id)",
      "match": "query(\n      posItemsRef,\n      where('menuItemId', '==', menuItem.id)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuPOSSync.ts",
      "line": 104,
      "code": "const query_doc = query(posItemsRef, where('menuItemId', '==', menuItemId)",
      "match": "query(posItemsRef, where('menuItemId', '==', menuItemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 148,
      "code": "let q = query(notificationsRef, orderBy('createdAt', 'desc')",
      "match": "query(notificationsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 152,
      "code": "q = query(q, limit(options.limit * 2)",
      "match": "query(q, limit(options.limit * 2)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 307,
      "code": "let q = query(notificationsRef, orderBy('createdAt', 'desc')",
      "match": "query(notificationsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 311,
      "code": "q = query(q, limit(options.limit)",
      "match": "query(q, limit(options.limit)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 314,
      "code": "q = query(q, limit(options.limit * 3)",
      "match": "query(q, limit(options.limit * 3)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 345,
      "code": "const expiredQuery = query(\n      notificationsRef,\n      where('expiresAt', '<=', now)",
      "match": "query(\n      notificationsRef,\n      where('expiresAt', '<=', now)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 215,
      "code": "let q = query(ticketsRef, orderBy('createdAt', 'desc')",
      "match": "query(ticketsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 218,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "query(q, where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 221,
      "code": "q = query(q, where('status', '==', filters.status)",
      "match": "query(q, where('status', '==', filters.status)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 224,
      "code": "q = query(q, where('priority', '==', filters.priority)",
      "match": "query(q, where('priority', '==', filters.priority)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 227,
      "code": "q = query(q, where('assignedTo', '==', filters.assignedTo)",
      "match": "query(q, where('assignedTo', '==', filters.assignedTo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 230,
      "code": "q = query(q, limit(filters.limit)",
      "match": "query(q, limit(filters.limit)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 381,
      "code": "let q = query(billingRef, orderBy('totalRevenue', 'desc')",
      "match": "query(billingRef, orderBy('totalRevenue', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 384,
      "code": "q = query(billingRef, where('tenantId', '==', tenantId)",
      "match": "query(billingRef, where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 563,
      "code": "let q = query(auditRef, orderBy('timestamp', 'desc')",
      "match": "query(auditRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 566,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "query(q, where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 569,
      "code": "q = query(q, where('userId', '==', filters.userId)",
      "match": "query(q, where('userId', '==', filters.userId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 572,
      "code": "q = query(q, where('action', '==', filters.action)",
      "match": "query(q, where('action', '==', filters.action)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 575,
      "code": "q = query(q, where('category', '==', filters.category)",
      "match": "query(q, where('category', '==', filters.category)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 578,
      "code": "q = query(q, where('severity', '==', filters.severity)",
      "match": "query(q, where('severity', '==', filters.severity)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 581,
      "code": "q = query(q, where('timestamp', '>=', Timestamp.fromDate(filters.startDate)",
      "match": "query(q, where('timestamp', '>=', Timestamp.fromDate(filters.startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 584,
      "code": "q = query(q, where('timestamp', '<=', Timestamp.fromDate(filters.endDate)",
      "match": "query(q, where('timestamp', '<=', Timestamp.fromDate(filters.endDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 587,
      "code": "q = query(q, limit(filters.limit)",
      "match": "query(q, limit(filters.limit)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 611,
      "code": "let q = query(ticketsRef, orderBy('createdAt', 'desc')",
      "match": "query(ticketsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 614,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "query(q, where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 617,
      "code": "q = query(q, where('status', '==', filters.status)",
      "match": "query(q, where('status', '==', filters.status)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 218,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 384,
      "code": "q = query(billingRef, where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 566,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 614,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 124,
      "code": "const q = query(itemsRef, orderBy('name')",
      "match": "query(itemsRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 165,
      "code": "const q = query(itemsRef, orderBy('name')",
      "match": "query(itemsRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 376,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 407,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 492,
      "code": "const q = query(\n      ordersRef, \n      where('createdAt', '>=', Timestamp.fromDate(startOfDay)",
      "match": "query(\n      ordersRef, \n      where('createdAt', '>=', Timestamp.fromDate(startOfDay)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 559,
      "code": "const q = query(\n          ordersRef,\n          where('createdAt', '>=', Timestamp.fromDate(startOfDay)",
      "match": "query(\n          ordersRef,\n          where('createdAt', '>=', Timestamp.fromDate(startOfDay)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 113,
      "code": "const q = query(suppliersRef, orderBy('name')",
      "match": "query(suppliersRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 183,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 231,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/salesDetective.ts",
      "line": 71,
      "code": "const q = query(collectionRef, orderBy('createdAt', 'desc')",
      "match": "query(collectionRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 76,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 97,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 119,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 141,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 158,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 184,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 78,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 99,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 121,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 143,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 160,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 186,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 83,
      "code": "const q = query(\n      shiftsRef,\n      where('locationId', '==', locationId)",
      "match": "query(\n      shiftsRef,\n      where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 120,
      "code": "const q = query(\n      shiftsRef,\n      where('locationId', '==', locationId)",
      "match": "query(\n      shiftsRef,\n      where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 285,
      "code": "const ordersQuery = query(\n      ordersRef,\n      where('createdAt', '>=', startTime)",
      "match": "query(\n      ordersRef,\n      where('createdAt', '>=', startTime)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 310,
      "code": "const expensesQuery = query(\n      expensesRef,\n      where('date', '>=', startTime)",
      "match": "query(\n      expensesRef,\n      where('date', '>=', startTime)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 54,
      "code": "const q = query(\n    collection(db, 'invitations')",
      "match": "query(\n    collection(db, 'invitations')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 67,
      "code": "const q = query(\n    collection(db, 'invitations')",
      "match": "query(\n    collection(db, 'invitations')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 56,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 120,
      "code": "let q = query(\n      collection(db, 'wastageEntries')",
      "match": "query(\n      collection(db, 'wastageEntries')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 197,
      "code": "const q = query(\n      collection(db, 'wastageThresholds')",
      "match": "query(\n      collection(db, 'wastageThresholds')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 122,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 199,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 99,
      "code": "const query1 = query(inventoryRef, where('branchId', '==', branchId)",
      "match": "query(inventoryRef, where('branchId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 107,
      "code": "const query2 = query(inventoryRef, where('branch', '==', branchId)",
      "match": "query(inventoryRef, where('branch', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 117,
      "code": "const query3 = query(inventoryRef, where('locationId', '==', locationIdWithPrefix)",
      "match": "query(inventoryRef, where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 126,
      "code": "const query4 = query(inventoryRef, where('locationId', '==', branchId)",
      "match": "query(inventoryRef, where('locationId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 158,
      "code": "const recentOrdersQuery = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 185,
      "code": "const purchaseQuery1 = query(purchaseOrdersRef, where('branchId', '==', branchId)",
      "match": "query(purchaseOrdersRef, where('branchId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 193,
      "code": "const purchaseQuery2 = query(purchaseOrdersRef, where('branch', '==', branchId)",
      "match": "query(purchaseOrdersRef, where('branch', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 203,
      "code": "const purchaseQuery3 = query(purchaseOrdersRef, where('locationId', '==', locationIdWithPrefix)",
      "match": "query(purchaseOrdersRef, where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 212,
      "code": "const purchaseQuery4 = query(purchaseOrdersRef, where('locationId', '==', branchId)",
      "match": "query(purchaseOrdersRef, where('locationId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence_Simple.tsx",
      "line": 64,
      "code": "const recentOrdersQuery = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 102,
      "code": "const q = query(\n          auditsRef, \n          where('locationId', '==', locationId)",
      "match": "query(\n          auditsRef, \n          where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 125,
      "code": "const fallbackQuery = query(auditsRef, orderBy('createdAt', 'desc')",
      "match": "query(auditsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 183,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 479,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 94,
      "code": "const q = query(\n          auditsRef, \n          where('locationId', '==', locationId)",
      "match": "query(\n          auditsRef, \n          where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 117,
      "code": "const fallbackQuery = query(auditsRef, orderBy('createdAt', 'desc')",
      "match": "query(auditsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 175,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 385,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 120,
      "code": "const q = query(\n        auditsRef, \n        where('locationId', '==', locationId)",
      "match": "query(\n        auditsRef, \n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 164,
      "code": "const q = query(\n        shiftsRef, \n        where('locationId', '==', locationId)",
      "match": "query(\n        shiftsRef, \n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_Simple.tsx",
      "line": 70,
      "code": "const q = query(auditsRef, orderBy('date', 'desc')",
      "match": "query(auditsRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/POS_Enhanced.tsx",
      "line": 1123,
      "code": "const inventorySnapshot = await getDocs(query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 374,
      "code": "const ordersQuery = query(\n        ordersCollection,\n        where('locationId', '==', locationId)",
      "match": "query(\n        ordersCollection,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/UserManagement.tsx",
      "line": 38,
      "code": "const q = query(usersRef, where('tenantId', '==', tenantId)",
      "match": "query(usersRef, where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/components/modules/UserManagement.tsx",
      "line": 38,
      "code": "const q = query(usersRef, where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/hooks/useCapitalIntelligenceData.js",
      "line": 21,
      "code": "const purchasesQuery = query(\n          collection(db, 'tenants', tenant.id, 'purchaseOrders')",
      "match": "query(\n          collection(db, 'tenants', tenant.id, 'purchaseOrders')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/hooks/useCapitalIntelligenceData.js",
      "line": 35,
      "code": "const inventoryQuery = query(\n          collection(db, 'tenants', tenant.id, 'inventory')",
      "match": "query(\n          collection(db, 'tenants', tenant.id, 'inventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/hooks/useCapitalIntelligenceData.js",
      "line": 46,
      "code": "const salesQuery = query(\n          collection(db, 'tenants', tenant.id, 'orders')",
      "match": "query(\n          collection(db, 'tenants', tenant.id, 'orders')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/app/firebase-test/page.tsx",
      "line": 23,
      "code": "const q = query(collection(db, collectionName)",
      "match": "query(collection(db, collectionName)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/app/layout-complex.tsx",
      "line": 246,
      "code": "const ordersQuery = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/AuthenticationSystem.tsx",
      "line": 56,
      "code": "const q = query(\n        shiftsRef,\n        where('date', '==', today)",
      "match": "query(\n        shiftsRef,\n        where('date', '==', today)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/DatabaseTester.tsx",
      "line": 37,
      "code": "const ordersQuery = query(collection(db, `tenants/${profile.tenantId}/orders`)",
      "match": "query(collection(db, `tenants/${profile.tenantId}/orders`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/DatabaseTester.tsx",
      "line": 50,
      "code": "const expensesQuery = query(collection(db, `tenants/${profile.tenantId}/expenses`)",
      "match": "query(collection(db, `tenants/${profile.tenantId}/expenses`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/FirebaseDataDiagnostic.tsx",
      "line": 38,
      "code": "const q = query(collection(db, collectionName)",
      "match": "query(collection(db, collectionName)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/NotificationCenter.tsx",
      "line": 33,
      "code": "const q = query(\n      notificationsRef,\n      orderBy('createdAt', 'desc')",
      "match": "query(\n      notificationsRef,\n      orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftGate.tsx",
      "line": 91,
      "code": "const activeShiftQuery = query(shiftsRef, where('status', '==', 'active')",
      "match": "query(shiftsRef, where('status', '==', 'active')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 77,
      "code": "const allOrdersQuery = query(\n          collection(db, `tenants/${profile.tenantId}/orders`)",
      "match": "query(\n          collection(db, `tenants/${profile.tenantId}/orders`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 101,
      "code": "const ordersQuery = query(\n          collection(db, `tenants/${profile.tenantId}/orders`)",
      "match": "query(\n          collection(db, `tenants/${profile.tenantId}/orders`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 148,
      "code": "const allOrdersQuery = query(\n            collection(db, `tenants/${profile.tenantId}/orders`)",
      "match": "query(\n            collection(db, `tenants/${profile.tenantId}/orders`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 190,
      "code": "const expensesQuery = query(\n          collection(db, `tenants/${profile.tenantId}/expenses`)",
      "match": "query(\n          collection(db, `tenants/${profile.tenantId}/expenses`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/ShiftControlPanel.tsx",
      "line": 60,
      "code": "const q = query(\n        staffRef,\n        where('locationId', '==', locationId)",
      "match": "query(\n        staffRef,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/ShiftDashboard.tsx",
      "line": 79,
      "code": "q = query(\n        shiftsRef,\n        where('locationId', '==', locationId)",
      "match": "query(\n        shiftsRef,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/ShiftLockScreen.tsx",
      "line": 84,
      "code": "const q = query(\n        shiftsRef,\n        where('locationId', '==', locationId)",
      "match": "query(\n        shiftsRef,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/ShiftManagement/ShiftStatusBar.tsx",
      "line": 52,
      "code": "const q = query(\n        shiftsRef,\n        where('locationId', '==', locationId)",
      "match": "query(\n        shiftsRef,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 99,
      "code": "const query1 = query(inventoryRef, where('branchId', '==', branchId)",
      "match": "query(inventoryRef, where('branchId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 107,
      "code": "const query2 = query(inventoryRef, where('branch', '==', branchId)",
      "match": "query(inventoryRef, where('branch', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 117,
      "code": "const query3 = query(inventoryRef, where('locationId', '==', locationIdWithPrefix)",
      "match": "query(inventoryRef, where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 126,
      "code": "const query4 = query(inventoryRef, where('locationId', '==', branchId)",
      "match": "query(inventoryRef, where('locationId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 158,
      "code": "const recentOrdersQuery = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 185,
      "code": "const purchaseQuery1 = query(purchaseOrdersRef, where('branchId', '==', branchId)",
      "match": "query(purchaseOrdersRef, where('branchId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 193,
      "code": "const purchaseQuery2 = query(purchaseOrdersRef, where('branch', '==', branchId)",
      "match": "query(purchaseOrdersRef, where('branch', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 203,
      "code": "const purchaseQuery3 = query(purchaseOrdersRef, where('locationId', '==', locationIdWithPrefix)",
      "match": "query(purchaseOrdersRef, where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 212,
      "code": "const purchaseQuery4 = query(purchaseOrdersRef, where('locationId', '==', branchId)",
      "match": "query(purchaseOrdersRef, where('locationId', '==', branchId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/CapitalIntelligence_Simple.tsx",
      "line": 64,
      "code": "const recentOrdersQuery = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 102,
      "code": "const q = query(\n          auditsRef, \n          where('locationId', '==', locationId)",
      "match": "query(\n          auditsRef, \n          where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 125,
      "code": "const fallbackQuery = query(auditsRef, orderBy('createdAt', 'desc')",
      "match": "query(auditsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 183,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 479,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 94,
      "code": "const q = query(\n          auditsRef, \n          where('locationId', '==', locationId)",
      "match": "query(\n          auditsRef, \n          where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 117,
      "code": "const fallbackQuery = query(auditsRef, orderBy('createdAt', 'desc')",
      "match": "query(auditsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 175,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 385,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 120,
      "code": "const q = query(\n        auditsRef, \n        where('locationId', '==', locationId)",
      "match": "query(\n        auditsRef, \n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 164,
      "code": "const q = query(\n        shiftsRef, \n        where('locationId', '==', locationId)",
      "match": "query(\n        shiftsRef, \n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/InventoryDiscrepancy_Simple.tsx",
      "line": 70,
      "code": "const q = query(auditsRef, orderBy('date', 'desc')",
      "match": "query(auditsRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/POS_Enhanced.tsx",
      "line": 1123,
      "code": "const inventorySnapshot = await getDocs(query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 374,
      "code": "const ordersQuery = query(\n        ordersCollection,\n        where('locationId', '==', locationId)",
      "match": "query(\n        ordersCollection,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/components/modules/UserManagement.tsx",
      "line": 38,
      "code": "const q = query(usersRef, where('tenantId', '==', tenantId)",
      "match": "query(usersRef, where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/components/modules/UserManagement.tsx",
      "line": 38,
      "code": "const q = query(usersRef, where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/hooks/useCapitalIntelligenceData.js",
      "line": 21,
      "code": "const purchasesQuery = query(\n          collection(db, 'tenants', tenant.id, 'purchaseOrders')",
      "match": "query(\n          collection(db, 'tenants', tenant.id, 'purchaseOrders')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/hooks/useCapitalIntelligenceData.js",
      "line": 35,
      "code": "const inventoryQuery = query(\n          collection(db, 'tenants', tenant.id, 'inventory')",
      "match": "query(\n          collection(db, 'tenants', tenant.id, 'inventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/hooks/useCapitalIntelligenceData.js",
      "line": 46,
      "code": "const salesQuery = query(\n          collection(db, 'tenants', tenant.id, 'orders')",
      "match": "query(\n          collection(db, 'tenants', tenant.id, 'orders')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 210,
      "code": "const snapshot1 = await getDocs(query(ordersRef1, orderBy('completedAt', 'desc')",
      "match": "query(ordersRef1, orderBy('completedAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 225,
      "code": "const snapshot2 = await getDocs(query(ordersRef2, orderBy('completedAt', 'desc')",
      "match": "query(ordersRef2, orderBy('completedAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 241,
      "code": "const snapshot3 = await getDocs(query(ordersRef3, limit(5)",
      "match": "query(ordersRef3, limit(5)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 467,
      "code": "const expensesQuery = query(\n        expensesRef,\n        where('date', '>=', currentMonth)",
      "match": "query(\n        expensesRef,\n        where('date', '>=', currentMonth)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 474,
      "code": "const salesQuery = query(\n        salesRef,\n        orderBy('completedAt', 'desc')",
      "match": "query(\n        salesRef,\n        orderBy('completedAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 709,
      "code": "const snapshot = await getDocs(query(method.ref()",
      "match": "query(method.ref()"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 801,
      "code": "const expensesQuery = query(\n        expensesRef,\n        where('date', '>=', currentMonth)",
      "match": "query(\n        expensesRef,\n        where('date', '>=', currentMonth)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 921,
      "code": "const snapshot = await getDocs(query(poRef, orderBy('createdAt', 'desc')",
      "match": "query(poRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 1003,
      "code": "const snapshot = await getDocs(query(method.ref()",
      "match": "query(method.ref()"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 1083,
      "code": "const expensesQuery = query(\n        expensesRef,\n        where('date', '>=', threeMonthsAgo)",
      "match": "query(\n        expensesRef,\n        where('date', '>=', threeMonthsAgo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/ai/dataService.ts",
      "line": 1182,
      "code": "const customersSnapshot = await getDocs(query(customersRef, limit(100)",
      "match": "query(customersRef, limit(100)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/auth/roleBasedAuth.ts",
      "line": 224,
      "code": "const q = query(\n      collection(db, 'users')",
      "match": "query(\n      collection(db, 'users')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/auth/roleBasedAuth.ts",
      "line": 227,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 463,
      "code": "const baseQuery = query(\n        collection(db, `tenants/${tenant.id}/${collectionName}`)",
      "match": "query(\n        collection(db, `tenants/${tenant.id}/${collectionName}`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/addons.ts",
      "line": 67,
      "code": "const q = query(\n      addonsRef,\n      where('tenantId', '==', tenantId)",
      "match": "query(\n      addonsRef,\n      where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/addons.ts",
      "line": 69,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/analytics.ts",
      "line": 112,
      "code": "q = query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)",
      "match": "query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/analytics.ts",
      "line": 119,
      "code": "q = query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)",
      "match": "query(\n        ordersRef,\n        where('createdAt', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 154,
      "code": "return query(collectionRef, ...filters)",
      "match": "query(collectionRef, ...filters)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 327,
      "code": "const menuQuery = query(\n      collection(db, `tenants/${tenantId}/menuItems`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/menuItems`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 347,
      "code": "const posQuery = query(\n      collection(db, `tenants/${tenantId}/posItems`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/posItems`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 367,
      "code": "const inventoryQuery = query(\n      collection(db, `tenants/${tenantId}/inventory`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/inventory`)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 387,
      "code": "const categoriesQuery = query(\n      collection(db, `tenants/${tenantId}/menuCategories`)",
      "match": "query(\n      collection(db, `tenants/${tenantId}/menuCategories`)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 329,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 349,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 369,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 389,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 132,
      "code": "const q = query(drawersRef, orderBy('name')",
      "match": "query(drawersRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 203,
      "code": "const q = query(methodsRef, orderBy('name')",
      "match": "query(methodsRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 315,
      "code": "q = query(\n        transactionsRef,\n        where('paymentMethodId', '==', paymentMethodId)",
      "match": "query(\n        transactionsRef,\n        where('paymentMethodId', '==', paymentMethodId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 321,
      "code": "q = query(transactionsRef, orderBy('timestamp', 'desc')",
      "match": "query(transactionsRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 376,
      "code": "q = query(\n        countsRef,\n        where('drawerId', '==', drawerId)",
      "match": "query(\n        countsRef,\n        where('drawerId', '==', drawerId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 382,
      "code": "q = query(countsRef, orderBy('timestamp', 'desc')",
      "match": "query(countsRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 500,
      "code": "const q = query(drawersRef, orderBy('name')",
      "match": "query(drawersRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 520,
      "code": "const q = query(transactionsRef, orderBy('timestamp', 'desc')",
      "match": "query(transactionsRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 576,
      "code": "const ordersQuery = query(\n        ordersCollection,\n        where('locationId', '==', locationId)",
      "match": "query(\n        ordersCollection,\n        where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/enhancedDataExplorerPOS.ts",
      "line": 60,
      "code": "getDocs(query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/enhancedDataExplorerPOS.ts",
      "line": 61,
      "code": "getDocs(query(posOrdersRef, orderBy('createdAt', 'desc')",
      "match": "query(posOrdersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 92,
      "code": "q = query(\n          expensesRef, \n          where('locationId', '==', locationId)",
      "match": "query(\n          expensesRef, \n          where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 110,
      "code": "const allQuery = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 130,
      "code": "const allQuery = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 147,
      "code": "q = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 177,
      "code": "const q = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 202,
      "code": "const q = query(expensesRef, orderBy('date', 'desc')",
      "match": "query(expensesRef, orderBy('date', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 308,
      "code": "const q = query(categoriesRef, orderBy('name')",
      "match": "query(categoriesRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 398,
      "code": "const q = query(\n      expensesRef,\n      where('date', '>=', Timestamp.fromDate(startDate)",
      "match": "query(\n      expensesRef,\n      where('date', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/expenses.ts",
      "line": 424,
      "code": "const q = query(\n      expensesRef,\n      where('category', '==', category)",
      "match": "query(\n      expensesRef,\n      where('category', '==', category)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 66,
      "code": "const existingQuery = query(\n      posItemsRef, \n      where('name', '==', menuItem.name)",
      "match": "query(\n      posItemsRef, \n      where('name', '==', menuItem.name)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 124,
      "code": "const query_doc = query(posItemsRef, where('menuItemId', '==', menuItemId)",
      "match": "query(posItemsRef, where('menuItemId', '==', menuItemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 304,
      "code": "inventoryQuery = query(inventoryRef, where('locationId', '==', locationId)",
      "match": "query(inventoryRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 308,
      "code": "inventoryQuery = query(inventoryRef)",
      "match": "query(inventoryRef)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 572,
      "code": "const menuQuery = query(\n        menuItemsRef,\n        where('name', '==', posItemData.name)",
      "match": "query(\n        menuItemsRef,\n        where('name', '==', posItemData.name)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 777,
      "code": "const posQuery = query(posItemsRef, where('menuItemId', '==', menuItem.id)",
      "match": "query(posItemsRef, where('menuItemId', '==', menuItem.id)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/integration.ts",
      "line": 1025,
      "code": "const inventoryQuery = query(\n              inventoryRef,\n              where('name', '==', ingredient.inventoryItemName)",
      "match": "query(\n              inventoryRef,\n              where('name', '==', ingredient.inventoryItemName)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 124,
      "code": "const q = query(\n      inventoryRef, \n      where('locationId', '==', locationId)",
      "match": "query(\n      inventoryRef, \n      where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 146,
      "code": "const q = query(inventoryRef, orderBy('name')",
      "match": "query(inventoryRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 172,
      "code": "const q = query(\n    inventoryRef, \n    where('locationId', '==', locationId)",
      "match": "query(\n    inventoryRef, \n    where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 690,
      "code": "q = query(\n        movementsRef,\n        where('itemId', '==', itemId)",
      "match": "query(\n        movementsRef,\n        where('itemId', '==', itemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 695,
      "code": "q = query(\n        movementsRef,\n        orderBy('timestamp', 'desc')",
      "match": "query(\n        movementsRef,\n        orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventory.ts",
      "line": 734,
      "code": "const q = query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(hoursAgo)",
      "match": "query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(hoursAgo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 90,
      "code": "let inventoryQuery = query(inventoryRef)",
      "match": "query(inventoryRef)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 94,
      "code": "inventoryQuery = query(inventoryRef, where('locationId', '==', locationId)",
      "match": "query(inventoryRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 126,
      "code": "const movementsQuery = query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(daysAgo)",
      "match": "query(\n      movementsRef,\n      where('timestamp', '>=', Timestamp.fromDate(daysAgo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryDeductionFix.ts",
      "line": 35,
      "code": "const posQuery = query(\n          posItemsRef,\n          where('name', '==', menuData.name)",
      "match": "query(\n          posItemsRef,\n          where('name', '==', menuData.name)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/inventoryVerification.ts",
      "line": 16,
      "code": "q = query(colRef, where('locationId', '==', locationId)",
      "match": "query(colRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 36,
      "code": "const q = query(\n    collection(db, 'locations')",
      "match": "query(\n    collection(db, 'locations')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 83,
      "code": "const inventoryQuery = query(\n    collection(db, 'locationInventory')",
      "match": "query(\n    collection(db, 'locationInventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 93,
      "code": "const analyticsQuery = query(\n    collection(db, 'locationAnalytics')",
      "match": "query(\n    collection(db, 'locationAnalytics')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 135,
      "code": "q = query(\n      collection(db, 'locationInventory')",
      "match": "query(\n      collection(db, 'locationInventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 141,
      "code": "q = query(\n      collection(db, 'locationInventory')",
      "match": "query(\n      collection(db, 'locationInventory')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 172,
      "code": "let q = query(\n    collection(db, 'locationAnalytics')",
      "match": "query(\n    collection(db, 'locationAnalytics')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 181,
      "code": "q = query(q, where('date', '>=', Timestamp.fromDate(startDate)",
      "match": "query(q, where('date', '>=', Timestamp.fromDate(startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 184,
      "code": "q = query(q, where('date', '<=', Timestamp.fromDate(endDate)",
      "match": "query(q, where('date', '<=', Timestamp.fromDate(endDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 206,
      "code": "const q = query(\n    collection(db, 'locations')",
      "match": "query(\n    collection(db, 'locations')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 38,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 208,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 644,
      "code": "const snapshot = await getDocs(query(templatesRef, orderBy('createdAt', 'desc')",
      "match": "query(templatesRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 766,
      "code": "const menuItemsQuery = query(menuItemsRef, where('templateInfo.templateId', '==', templateId)",
      "match": "query(menuItemsRef, where('templateInfo.templateId', '==', templateId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1067,
      "code": "const queryRef = query(itemsRef, where('locationId', '==', locationId)",
      "match": "query(itemsRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1318,
      "code": "const locationQuery = query(categoriesRef, where('locationId', '==', locationId)",
      "match": "query(categoriesRef, where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1521,
      "code": "const q = query(recipesRef, where('menuItemId', '==', menuItemId)",
      "match": "query(recipesRef, where('menuItemId', '==', menuItemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuPOSSync.ts",
      "line": 49,
      "code": "const existingQuery = query(\n      posItemsRef,\n      where('menuItemId', '==', menuItem.id)",
      "match": "query(\n      posItemsRef,\n      where('menuItemId', '==', menuItem.id)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/menuPOSSync.ts",
      "line": 104,
      "code": "const query_doc = query(posItemsRef, where('menuItemId', '==', menuItemId)",
      "match": "query(posItemsRef, where('menuItemId', '==', menuItemId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 148,
      "code": "let q = query(notificationsRef, orderBy('createdAt', 'desc')",
      "match": "query(notificationsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 152,
      "code": "q = query(q, limit(options.limit * 2)",
      "match": "query(q, limit(options.limit * 2)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 307,
      "code": "let q = query(notificationsRef, orderBy('createdAt', 'desc')",
      "match": "query(notificationsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 311,
      "code": "q = query(q, limit(options.limit)",
      "match": "query(q, limit(options.limit)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 314,
      "code": "q = query(q, limit(options.limit * 3)",
      "match": "query(q, limit(options.limit * 3)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/notifications.ts",
      "line": 345,
      "code": "const expiredQuery = query(\n      notificationsRef,\n      where('expiresAt', '<=', now)",
      "match": "query(\n      notificationsRef,\n      where('expiresAt', '<=', now)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 215,
      "code": "let q = query(ticketsRef, orderBy('createdAt', 'desc')",
      "match": "query(ticketsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 218,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "query(q, where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 221,
      "code": "q = query(q, where('status', '==', filters.status)",
      "match": "query(q, where('status', '==', filters.status)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 224,
      "code": "q = query(q, where('priority', '==', filters.priority)",
      "match": "query(q, where('priority', '==', filters.priority)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 227,
      "code": "q = query(q, where('assignedTo', '==', filters.assignedTo)",
      "match": "query(q, where('assignedTo', '==', filters.assignedTo)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 230,
      "code": "q = query(q, limit(filters.limit)",
      "match": "query(q, limit(filters.limit)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 381,
      "code": "let q = query(billingRef, orderBy('totalRevenue', 'desc')",
      "match": "query(billingRef, orderBy('totalRevenue', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 384,
      "code": "q = query(billingRef, where('tenantId', '==', tenantId)",
      "match": "query(billingRef, where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 563,
      "code": "let q = query(auditRef, orderBy('timestamp', 'desc')",
      "match": "query(auditRef, orderBy('timestamp', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 566,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "query(q, where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 569,
      "code": "q = query(q, where('userId', '==', filters.userId)",
      "match": "query(q, where('userId', '==', filters.userId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 572,
      "code": "q = query(q, where('action', '==', filters.action)",
      "match": "query(q, where('action', '==', filters.action)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 575,
      "code": "q = query(q, where('category', '==', filters.category)",
      "match": "query(q, where('category', '==', filters.category)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 578,
      "code": "q = query(q, where('severity', '==', filters.severity)",
      "match": "query(q, where('severity', '==', filters.severity)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 581,
      "code": "q = query(q, where('timestamp', '>=', Timestamp.fromDate(filters.startDate)",
      "match": "query(q, where('timestamp', '>=', Timestamp.fromDate(filters.startDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 584,
      "code": "q = query(q, where('timestamp', '<=', Timestamp.fromDate(filters.endDate)",
      "match": "query(q, where('timestamp', '<=', Timestamp.fromDate(filters.endDate)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 587,
      "code": "q = query(q, limit(filters.limit)",
      "match": "query(q, limit(filters.limit)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 611,
      "code": "let q = query(ticketsRef, orderBy('createdAt', 'desc')",
      "match": "query(ticketsRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 614,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "query(q, where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 617,
      "code": "q = query(q, where('status', '==', filters.status)",
      "match": "query(q, where('status', '==', filters.status)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 218,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 384,
      "code": "q = query(billingRef, where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 566,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/platformAdmin.ts",
      "line": 614,
      "code": "q = query(q, where('tenantId', '==', filters.tenantId)",
      "match": "where('tenantId', '==', filters.tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 124,
      "code": "const q = query(itemsRef, orderBy('name')",
      "match": "query(itemsRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 165,
      "code": "const q = query(itemsRef, orderBy('name')",
      "match": "query(itemsRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 376,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 407,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 492,
      "code": "const q = query(\n      ordersRef, \n      where('createdAt', '>=', Timestamp.fromDate(startOfDay)",
      "match": "query(\n      ordersRef, \n      where('createdAt', '>=', Timestamp.fromDate(startOfDay)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/pos.ts",
      "line": 559,
      "code": "const q = query(\n          ordersRef,\n          where('createdAt', '>=', Timestamp.fromDate(startOfDay)",
      "match": "query(\n          ordersRef,\n          where('createdAt', '>=', Timestamp.fromDate(startOfDay)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 113,
      "code": "const q = query(suppliersRef, orderBy('name')",
      "match": "query(suppliersRef, orderBy('name')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 183,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 231,
      "code": "const q = query(ordersRef, orderBy('createdAt', 'desc')",
      "match": "query(ordersRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/salesDetective.ts",
      "line": 71,
      "code": "const q = query(collectionRef, orderBy('createdAt', 'desc')",
      "match": "query(collectionRef, orderBy('createdAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 76,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 97,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 119,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 141,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 158,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 184,
      "code": "const shiftsQuery = query(\n    collection(db, 'shifts')",
      "match": "query(\n    collection(db, 'shifts')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 78,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 99,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 121,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 143,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 160,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 186,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 83,
      "code": "const q = query(\n      shiftsRef,\n      where('locationId', '==', locationId)",
      "match": "query(\n      shiftsRef,\n      where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 120,
      "code": "const q = query(\n      shiftsRef,\n      where('locationId', '==', locationId)",
      "match": "query(\n      shiftsRef,\n      where('locationId', '==', locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 285,
      "code": "const ordersQuery = query(\n      ordersRef,\n      where('createdAt', '>=', startTime)",
      "match": "query(\n      ordersRef,\n      where('createdAt', '>=', startTime)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/shifts.ts",
      "line": 310,
      "code": "const expensesQuery = query(\n      expensesRef,\n      where('date', '>=', startTime)",
      "match": "query(\n      expensesRef,\n      where('date', '>=', startTime)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 54,
      "code": "const q = query(\n    collection(db, 'invitations')",
      "match": "query(\n    collection(db, 'invitations')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 67,
      "code": "const q = query(\n    collection(db, 'invitations')",
      "match": "query(\n    collection(db, 'invitations')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/userManagement.ts",
      "line": 56,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 120,
      "code": "let q = query(\n      collection(db, 'wastageEntries')",
      "match": "query(\n      collection(db, 'wastageEntries')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 197,
      "code": "const q = query(\n      collection(db, 'wastageThresholds')",
      "match": "query(\n      collection(db, 'wastageThresholds')"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 122,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "MEDIUM",
      "description": "Query with only tenantId filter - missing locationId for branch isolation",
      "category": "incomplete_isolation",
      "file": "src/lib/firebase/wastageTracking.ts",
      "line": 199,
      "code": "where('tenantId', '==', tenantId)",
      "match": "where('tenantId', '==', tenantId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 55,
      "code": "const existingRoles = await getDocs(query(rolesRef, where('isSystemRole', '==', true)",
      "match": "query(rolesRef, where('isSystemRole', '==', true)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 91,
      "code": "const existingQuery = query(\n      userRoleRef,\n      where('userId', '==', userId)",
      "match": "query(\n      userRoleRef,\n      where('userId', '==', userId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 128,
      "code": "const roleQuery = query(\n      userRoleRef,\n      where('userId', '==', userId)",
      "match": "query(\n      userRoleRef,\n      where('userId', '==', userId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 196,
      "code": "let userRoleQuery = query(\n      userRolesRef,\n      where('userId', '==', userId)",
      "match": "query(\n      userRolesRef,\n      where('userId', '==', userId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 202,
      "code": "userRoleQuery = query(\n        userRoleQuery,\n        where('branchId', 'in', [branchId, null])",
      "match": "query(\n        userRoleQuery,\n        where('branchId', 'in', [branchId, null])"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 230,
      "code": "const roleQuery = query(\n      rolesRef,\n      where('id', 'in', roleIds)",
      "match": "query(\n      rolesRef,\n      where('id', 'in', roleIds)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 260,
      "code": "const inheritedQuery = query(\n          rolesRef,\n          where('id', 'in', role.inheritFrom)",
      "match": "query(\n          rolesRef,\n          where('id', 'in', role.inheritFrom)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/permissionService.ts",
      "line": 303,
      "code": "const userRoleQuery = query(\n      userRolesRef,\n      where('userId', '==', userId)",
      "match": "query(\n      userRolesRef,\n      where('userId', '==', userId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/OfflineDataManager.ts",
      "line": 364,
      "code": "? query(collectionRef, ...queryConstraints)",
      "match": "query(collectionRef, ...queryConstraints)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 208,
      "code": "const ordersQuery = query(\n      ordersRef,\n      where('locationId', '==', this.locationId)",
      "match": "query(\n      ordersRef,\n      where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 289,
      "code": "const expensesQuery = query(\n      expensesRef,\n      where('locationId', '==', this.locationId)",
      "match": "query(\n      expensesRef,\n      where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 309,
      "code": "const transactionsQuery = query(\n      transactionsRef,\n      where('locationId', '==', this.locationId)",
      "match": "query(\n      transactionsRef,\n      where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 333,
      "code": "const sourceQuery = query(sourceRef, where('locationId', '==', this.locationId)",
      "match": "query(sourceRef, where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 445,
      "code": "const locationQuery = query(collectionRef, where('locationId', '==', this.locationId)",
      "match": "query(collectionRef, where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 469,
      "code": "const locationQuery = query(collectionRef, where('locationId', '==', this.locationId)",
      "match": "query(collectionRef, where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 565,
      "code": "const logsQuery = query(\n      logsRef,\n      orderBy('resetAt', 'desc')",
      "match": "query(\n      logsRef,\n      orderBy('resetAt', 'desc')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 592,
      "code": "const operationalQuery = query(operationalRef, where('locationId', '==', this.locationId)",
      "match": "query(operationalRef, where('locationId', '==', this.locationId)"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/StockTransactionService.ts",
      "line": 463,
      "code": "const movementsQuery = query(\n        collection(db, 'stockMovements')",
      "match": "query(\n        collection(db, 'stockMovements')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/StockTransactionService.ts",
      "line": 518,
      "code": "const auditQuery = query(\n        collection(db, 'auditLogs')",
      "match": "query(\n        collection(db, 'auditLogs')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/StockTransactionService.ts",
      "line": 545,
      "code": "const movementsQuery = query(\n        collection(db, 'stockMovements')",
      "match": "query(\n        collection(db, 'stockMovements')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/services/subscriptionService.ts",
      "line": 274,
      "code": "const subscriptionQuery = query(\n        collection(db, 'subscriptions')",
      "match": "query(\n        collection(db, 'subscriptions')"
    },
    {
      "type": "HIGH",
      "description": "Query without locationId filter - potential branch isolation bypass",
      "category": "missing_branch_filter",
      "file": "src/lib/utils/shiftReportGenerator.ts",
      "line": 133,
      "code": "const inventoryQuery = query(inventoryRef, where('locationId', '==', locationId)",
      "match": "query(inventoryRef, where('locationId', '==', locationId)"
    }
  ],
  "implementationIssues": [
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/addons.ts",
      "line": 65,
      "code": "console.log('Loading add-ons for:', { tenantId, locationId",
      "match": "console.log('Loading add-ons for:', { tenantId, locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 153,
      "code": "console.log(`🎯 BRANCH-ISOLATED QUERY: ${collectionName} for location ${locationId",
      "match": "console.log(`🎯 BRANCH-ISOLATED QUERY: ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 208,
      "code": "console.log(`✅ BRANCH DATA LOADED: ${items.length} items from ${collectionName} for location ${locationId",
      "match": "console.log(`✅ BRANCH DATA LOADED: ${items.length} items from ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 253,
      "code": "console.log(`✅ BRANCH DATA CREATED: ${docRef.id} in ${collectionName} for location ${locationId",
      "match": "console.log(`✅ BRANCH DATA CREATED: ${docRef.id} in ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 297,
      "code": "console.log(`✅ BRANCH DATA UPDATED: ${documentId} in ${collectionName} for location ${locationId",
      "match": "console.log(`✅ BRANCH DATA UPDATED: ${documentId} in ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 441,
      "code": "console.log(`🗑️ DELETING contaminated item: ${data.name} (locationId: ${data.locationId",
      "match": "console.log(`🗑️ DELETING contaminated item: ${data.name} (locationId: ${data.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 588,
      "code": "console.log(`💳 [PaymentMethodSummary] BRANCH FILTERED: ${orders.length} orders for location \"${locationId",
      "match": "console.log(`💳 [PaymentMethodSummary] BRANCH FILTERED: ${orders.length} orders for location \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/enhancedAuth.ts",
      "line": 437,
      "code": "console.log('✅ Initial location created in root locations collection:', locationId",
      "match": "console.log('✅ Initial location created in root locations collection:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/enhancedDataExplorerPOS.ts",
      "line": 102,
      "code": "console.log(`🎯 ENHANCED DATA EXPLORER: Filtered from ${originalCount} to ${allOrders.length} orders for location ${locationId",
      "match": "console.log(`🎯 ENHANCED DATA EXPLORER: Filtered from ${originalCount} to ${allOrders.length} orders for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 89,
      "code": "console.log(`🎯 BRANCH-ISOLATED EXPENSE QUERY: fetching expenses for location ${locationId",
      "match": "console.log(`🎯 BRANCH-ISOLATED EXPENSE QUERY: fetching expenses for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 104,
      "code": "console.log(`✅ SERVER-SIDE FILTERED: ${expenses.length} expenses with locationId",
      "match": "console.log(`✅ SERVER-SIDE FILTERED: ${expenses.length} expenses with locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 108,
      "code": "console.log(`🔄 FALLBACK: No expenses found with locationId",
      "match": "console.log(`🔄 FALLBACK: No expenses found with locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 123,
      "code": "console.log(`✅ CLIENT-SIDE FILTERED: ${expenses.length} expenses (includes legacy expenses without locationId",
      "match": "console.log(`✅ CLIENT-SIDE FILTERED: ${expenses.length} expenses (includes legacy expenses without locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 142,
      "code": "console.log(`✅ FALLBACK FILTERING: ${expenses.length} expenses loaded for location ${locationId",
      "match": "console.log(`✅ FALLBACK FILTERING: ${expenses.length} expenses loaded for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 173,
      "code": "console.log(`🎯 BRANCH-ISOLATED EXPENSE SUBSCRIPTION: location ${locationId",
      "match": "console.log(`🎯 BRANCH-ISOLATED EXPENSE SUBSCRIPTION: location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 190,
      "code": "console.log(`✅ BRANCH-ISOLATED EXPENSE SUBSCRIPTION: ${filteredExpenses.length} expenses filtered for location ${locationId",
      "match": "console.log(`✅ BRANCH-ISOLATED EXPENSE SUBSCRIPTION: ${filteredExpenses.length} expenses filtered for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 238,
      "code": "console.log(`✅ BRANCH-SPECIFIC EXPENSE CREATED: ${docRef.id} for location ${expense.locationId",
      "match": "console.log(`✅ BRANCH-SPECIFIC EXPENSE CREATED: ${docRef.id} for location ${expense.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/fixMenuItems.ts",
      "line": 19,
      "code": "console.log('🔧 Fixing menu items locationId",
      "match": "console.log('🔧 Fixing menu items locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/fixMenuItems.ts",
      "line": 122,
      "code": "console.log('🔧 Auto-fixing locationId",
      "match": "console.log('🔧 Auto-fixing locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 160,
      "code": "console.log('🚨 Location ID:', locationId",
      "match": "console.log('🚨 Location ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 296,
      "code": "console.log(`🔍 [INVENTORY DEDUCTION] Searching for inventory item by name: \"${itemName}\" in location: ${locationId",
      "match": "console.log(`🔍 [INVENTORY DEDUCTION] Searching for inventory item by name: \"${itemName}\" in location: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 305,
      "code": "console.log(`🎯 [INVENTORY DEDUCTION] Filtering by locationId: ${locationId",
      "match": "console.log(`🎯 [INVENTORY DEDUCTION] Filtering by locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 309,
      "code": "console.log(`⚠️ [INVENTORY DEDUCTION] No locationId",
      "match": "console.log(`⚠️ [INVENTORY DEDUCTION] No locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 878,
      "code": "console.log('Location-specific pricing calculated for:', menuItemId, 'at location:', locationId",
      "match": "console.log('Location-specific pricing calculated for:', menuItemId, 'at location:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1060,
      "code": "console.log(`🔍 getMenuItems called with tenantId: ${tenantId}, locationId: ${locationId",
      "match": "console.log(`🔍 getMenuItems called with tenantId: ${tenantId}, locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1066,
      "code": "console.log(`🔒 FORCING locationId filter: ${locationId",
      "match": "console.log(`🔒 FORCING locationId filter: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1069,
      "code": "console.log(`📊 Query with locationId",
      "match": "console.log(`📊 Query with locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1073,
      "code": "console.log(`📋 Item: ${data.name}, locationId: ${data.locationId",
      "match": "console.log(`📋 Item: ${data.name}, locationId: ${data.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1088,
      "code": "console.log(`✅ Final result: ${sortedItems.length} items for ${locationId",
      "match": "console.log(`✅ Final result: ${sortedItems.length} items for ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1129,
      "code": "console.log('🔧 addMenuItem: Starting with enhanced branch isolation:', {\n      name: item.name,\n      category: item.category,\n      price: item.price,\n      tenantId: item.tenantId,\n      locationId: item.locationId",
      "match": "console.log('🔧 addMenuItem: Starting with enhanced branch isolation:', {\n      name: item.name,\n      category: item.category,\n      price: item.price,\n      tenantId: item.tenantId,\n      locationId: item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1186,
      "code": "console.log(`✅ BRANCH-ISOLATED MENU ITEM CREATED: ${docId} for location ${item.locationId",
      "match": "console.log(`✅ BRANCH-ISOLATED MENU ITEM CREATED: ${docId} for location ${item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1317,
      "code": "console.log(`🎯 SERVER-SIDE FILTERING: Querying only categories for locationId: ${locationId",
      "match": "console.log(`🎯 SERVER-SIDE FILTERING: Querying only categories for locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1321,
      "code": "console.log(`✅ Firebase query returned ${snapshot.size} categories for location ${locationId",
      "match": "console.log(`✅ Firebase query returned ${snapshot.size} categories for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1334,
      "code": "console.log(`� Firebase returned ${categories.length} categories:`, categories.map(cat => ({\n      id: cat.id,\n      name: cat.name,\n      locationId",
      "match": "console.log(`� Firebase returned ${categories.length} categories:`, categories.map(cat => ({\n      id: cat.id,\n      name: cat.name,\n      locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1368,
      "code": "console.log(`📂 Menu Categories: Loaded ${sortedCategories.length} categories${locationId ? ` for location ${locationId",
      "match": "console.log(`📂 Menu Categories: Loaded ${sortedCategories.length} categories${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1426,
      "code": "console.log(`✅ Default menu categories initialized successfully${locationId ? ` for location ${locationId",
      "match": "console.log(`✅ Default menu categories initialized successfully${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 137,
      "code": "console.log(`📦 POS: Loaded ${items.length} items${locationId ? ` for location ${locationId",
      "match": "console.log(`📦 POS: Loaded ${items.length} items${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 389,
      "code": "console.log(`📋 POS: Loaded ${orders.length} orders${locationId ? ` for location ${locationId",
      "match": "console.log(`📋 POS: Loaded ${orders.length} orders${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 403,
      "code": "console.log('[subscribeToPOSOrders] Starting subscription with locationId:', locationId",
      "match": "console.log('[subscribeToPOSOrders] Starting subscription with locationId:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 416,
      "code": "console.log('[subscribeToPOSOrders] All locationIds:', orders.map(o => o.locationId",
      "match": "console.log('[subscribeToPOSOrders] All locationIds:', orders.map(o => o.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 424,
      "code": "console.log(`[subscribeToPOSOrders] 🚫 Filtering out order ${order.id}: \"${order.locationId}\" !== \"${locationId",
      "match": "console.log(`[subscribeToPOSOrders] 🚫 Filtering out order ${order.id}: \"${order.locationId}\" !== \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 430,
      "code": "console.log('[subscribeToPOSOrders] No locationId",
      "match": "console.log('[subscribeToPOSOrders] No locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 196,
      "code": "console.log(`📋 PO: Loaded ${orders.length} purchase orders${locationId ? ` for location ${locationId",
      "match": "console.log(`📋 PO: Loaded ${orders.length} purchase orders${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 244,
      "code": "console.log(`🔄 PO: Real-time update - ${orders.length} purchase orders${locationId ? ` for location ${locationId",
      "match": "console.log(`🔄 PO: Real-time update - ${orders.length} purchase orders${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/salesDetective.ts",
      "line": 183,
      "code": "console.log(`      ${index + 1}. ${doc.id}: location=${doc.locationId",
      "match": "console.log(`      ${index + 1}. ${doc.id}: location=${doc.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/shifts.ts",
      "line": 26,
      "code": "console.log('🔄 Creating shift:', { \n      locationId: shiftData.locationId",
      "match": "console.log('🔄 Creating shift:', { \n      locationId: shiftData.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/shifts.ts",
      "line": 234,
      "code": "console.log(`Performing daily reset for location ${locationId",
      "match": "console.log(`Performing daily reset for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/shifts.ts",
      "line": 259,
      "code": "console.log(`Daily reset completed for location ${locationId",
      "match": "console.log(`Daily reset completed for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 126,
      "code": "console.log('🏢 Branch info:', { locationId",
      "match": "console.log('🏢 Branch info:', { locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 188,
      "code": "console.log(`🔍 EXPECTED locationId: \"${locationId",
      "match": "console.log(`🔍 EXPECTED locationId: \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 195,
      "code": "console.log(`� BRANCH ISOLATED: ${filteredOrders.length} orders for location \"${locationId",
      "match": "console.log(`� BRANCH ISOLATED: ${filteredOrders.length} orders for location \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 243,
      "code": "console.log(`💸 Archive ${archiveId}: ${archivedExpenses.length} total expenses, ${branchFilteredArchiveExpenses.length} for branch \"${locationId",
      "match": "console.log(`💸 Archive ${archiveId}: ${archivedExpenses.length} total expenses, ${branchFilteredArchiveExpenses.length} for branch \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 261,
      "code": "console.log(`🔍 EXPECTED locationId for expenses: \"${locationId",
      "match": "console.log(`🔍 EXPECTED locationId for expenses: \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 268,
      "code": "console.log(`🏢 BRANCH ISOLATED EXPENSES: ${filteredExpensesByLocation.length} expenses for location \"${locationId",
      "match": "console.log(`🏢 BRANCH ISOLATED EXPENSES: ${filteredExpensesByLocation.length} expenses for location \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReportsOptimized.tsx",
      "line": 243,
      "code": "console.log('Report Data Debug:', {\n        dashboardStats,\n        originalSalesDataLength: salesData.length,\n        finalSalesDataLength: finalSalesData.length,\n        topItemsLength: topItems.length,\n        inventoryAnalytics,\n        paymentAnalyticsLength: paymentAnalytics.length,\n        expensesLength: expensesData.length,\n        purchaseOrdersLength: purchaseOrdersData.length,\n        tenantId: profile.tenantId,\n        locationId",
      "match": "console.log('Report Data Debug:', {\n        dashboardStats,\n        originalSalesDataLength: salesData.length,\n        finalSalesDataLength: finalSalesData.length,\n        topItemsLength: topItems.length,\n        inventoryAnalytics,\n        paymentAnalyticsLength: paymentAnalytics.length,\n        expensesLength: expensesData.length,\n        purchaseOrdersLength: purchaseOrdersData.length,\n        tenantId: profile.tenantId,\n        locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 89,
      "code": "console.log(`    - locationId: \"${item.locationId",
      "match": "console.log(`    - locationId: \"${item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 116,
      "code": "console.log('🔍 Trying filter 3: locationId ==', locationId",
      "match": "console.log('🔍 Trying filter 3: locationId ==', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 125,
      "code": "console.log('🔍 Trying filter 4: locationId",
      "match": "console.log('🔍 Trying filter 4: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 175,
      "code": "console.log(`    - locationId: \"${purchase.locationId",
      "match": "console.log(`    - locationId: \"${purchase.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 202,
      "code": "console.log('🔍 Trying purchase filter 3: locationId ==', locationId",
      "match": "console.log('🔍 Trying purchase filter 3: locationId ==', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 211,
      "code": "console.log('🔍 Trying purchase filter 4: locationId",
      "match": "console.log('🔍 Trying purchase filter 4: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/EnhancedMenuBuilder.tsx",
      "line": 222,
      "code": "console.log('📞 Fetching data for:', {\n          tenantId: profile.tenantId,\n          locationId",
      "match": "console.log('📞 Fetching data for:', {\n          tenantId: profile.tenantId,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 114,
      "code": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId",
      "match": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 139,
      "code": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId",
      "match": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 167,
      "code": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 464,
      "code": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 106,
      "code": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId",
      "match": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 131,
      "code": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId",
      "match": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 159,
      "code": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 370,
      "code": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 613,
      "code": "console.log('🔍 Quick Check Debug:', {\n        branchName: selectedBranch.name,\n        branchId: selectedBranch.id,\n        locationId: locationId",
      "match": "console.log('🔍 Quick Check Debug:', {\n        branchName: selectedBranch.name,\n        branchId: selectedBranch.id,\n        locationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 626,
      "code": "console.log('❌ No items found with:', { tenantId: profile.tenantId, locationId",
      "match": "console.log('❌ No items found with:', { tenantId: profile.tenantId, locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/LocationManagement.tsx",
      "line": 177,
      "code": "console.log('🏢 Location created with ID:', locationId",
      "match": "console.log('🏢 Location created with ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 177,
      "code": "console.log('[Analytics] Setting up inventory subscription for location:', locationId",
      "match": "console.log('[Analytics] Setting up inventory subscription for location:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 216,
      "code": "console.log('[Analytics] Setting up POS orders subscription for location:', locationId",
      "match": "console.log('[Analytics] Setting up POS orders subscription for location:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 223,
      "code": "console.log('[Analytics] Expected locationId:', locationId",
      "match": "console.log('[Analytics] Expected locationId:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 224,
      "code": "console.log('[Analytics] Sample order locationId",
      "match": "console.log('[Analytics] Sample order locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 230,
      "code": "console.log(`[Analytics] 🚫 Filtering out order ${order.id} with locationId: ${order.locationId} (expected: ${locationId",
      "match": "console.log(`[Analytics] 🚫 Filtering out order ${order.id} with locationId: ${order.locationId} (expected: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 239,
      "code": "console.log(`[Analytics] 🎯 DASHBOARD ANALYTICS: Showing ${filteredOrders.length} orders for branch ${locationId",
      "match": "console.log(`[Analytics] 🎯 DASHBOARD ANALYTICS: Showing ${filteredOrders.length} orders for branch ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 240,
      "code": "console.log('[Analytics] Dashboard orders:', filteredOrders.map(o => ({\n          id: o.id,\n          status: o.status,\n          total: o.total,\n          locationId: o.locationId",
      "match": "console.log('[Analytics] Dashboard orders:', filteredOrders.map(o => ({\n          id: o.id,\n          status: o.status,\n          total: o.total,\n          locationId: o.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MenuBuilder.tsx",
      "line": 332,
      "code": "console.log(`🎯 Expected locationId: ${locationId",
      "match": "console.log(`🎯 Expected locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MenuBuilder.tsx",
      "line": 349,
      "code": "console.log(`     ${index + 1}. \"${item.name}\" - locationId: ${item.locationId",
      "match": "console.log(`     ${index + 1}. \"${item.name}\" - locationId: ${item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/POS.tsx",
      "line": 392,
      "code": "console.log('� Loading POS menu items FRESH from Firebase:', {\n          tenantId: profile.tenantId,\n          locationId",
      "match": "console.log('� Loading POS menu items FRESH from Firebase:', {\n          tenantId: profile.tenantId,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 250,
      "code": "console.log('[PaymentAnalytics] Location ID:', locationId",
      "match": "console.log('[PaymentAnalytics] Location ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 257,
      "code": "console.log('[PaymentAnalytics] 🔍 Sample order locationId",
      "match": "console.log('[PaymentAnalytics] 🔍 Sample order locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/app/reports/explorer/clean/page.tsx",
      "line": 32,
      "code": "console.log('🔍 Fetching unified data:', { \n          tenantId: DEV_TENANT_ID, \n          locationId",
      "match": "console.log('🔍 Fetching unified data:', { \n          tenantId: DEV_TENANT_ID, \n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/ShiftGate.tsx",
      "line": 82,
      "code": "console.log('📍 Location ID generated:', locationId",
      "match": "console.log('📍 Location ID generated:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 58,
      "code": "console.log('- Location ID:', locationId",
      "match": "console.log('- Location ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 86,
      "code": "console.log('📦 Sample order locationId:', sampleOrder.locationId",
      "match": "console.log('📦 Sample order locationId:', sampleOrder.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 98,
      "code": "console.log('- LocationId filter:', locationId",
      "match": "console.log('- LocationId filter:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 126,
      "code": "console.log('🏢 Branch info:', { locationId",
      "match": "console.log('🏢 Branch info:', { locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 188,
      "code": "console.log(`🔍 EXPECTED locationId: \"${locationId",
      "match": "console.log(`🔍 EXPECTED locationId: \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 195,
      "code": "console.log(`� BRANCH ISOLATED: ${filteredOrders.length} orders for location \"${locationId",
      "match": "console.log(`� BRANCH ISOLATED: ${filteredOrders.length} orders for location \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 243,
      "code": "console.log(`💸 Archive ${archiveId}: ${archivedExpenses.length} total expenses, ${branchFilteredArchiveExpenses.length} for branch \"${locationId",
      "match": "console.log(`💸 Archive ${archiveId}: ${archivedExpenses.length} total expenses, ${branchFilteredArchiveExpenses.length} for branch \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 261,
      "code": "console.log(`🔍 EXPECTED locationId for expenses: \"${locationId",
      "match": "console.log(`🔍 EXPECTED locationId for expenses: \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReports.tsx",
      "line": 268,
      "code": "console.log(`🏢 BRANCH ISOLATED EXPENSES: ${filteredExpensesByLocation.length} expenses for location \"${locationId",
      "match": "console.log(`🏢 BRANCH ISOLATED EXPENSES: ${filteredExpensesByLocation.length} expenses for location \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/BusinessReportsOptimized.tsx",
      "line": 243,
      "code": "console.log('Report Data Debug:', {\n        dashboardStats,\n        originalSalesDataLength: salesData.length,\n        finalSalesDataLength: finalSalesData.length,\n        topItemsLength: topItems.length,\n        inventoryAnalytics,\n        paymentAnalyticsLength: paymentAnalytics.length,\n        expensesLength: expensesData.length,\n        purchaseOrdersLength: purchaseOrdersData.length,\n        tenantId: profile.tenantId,\n        locationId",
      "match": "console.log('Report Data Debug:', {\n        dashboardStats,\n        originalSalesDataLength: salesData.length,\n        finalSalesDataLength: finalSalesData.length,\n        topItemsLength: topItems.length,\n        inventoryAnalytics,\n        paymentAnalyticsLength: paymentAnalytics.length,\n        expensesLength: expensesData.length,\n        purchaseOrdersLength: purchaseOrdersData.length,\n        tenantId: profile.tenantId,\n        locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 89,
      "code": "console.log(`    - locationId: \"${item.locationId",
      "match": "console.log(`    - locationId: \"${item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 116,
      "code": "console.log('🔍 Trying filter 3: locationId ==', locationId",
      "match": "console.log('🔍 Trying filter 3: locationId ==', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 125,
      "code": "console.log('🔍 Trying filter 4: locationId",
      "match": "console.log('🔍 Trying filter 4: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 175,
      "code": "console.log(`    - locationId: \"${purchase.locationId",
      "match": "console.log(`    - locationId: \"${purchase.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 202,
      "code": "console.log('🔍 Trying purchase filter 3: locationId ==', locationId",
      "match": "console.log('🔍 Trying purchase filter 3: locationId ==', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 211,
      "code": "console.log('🔍 Trying purchase filter 4: locationId",
      "match": "console.log('🔍 Trying purchase filter 4: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/EnhancedMenuBuilder.tsx",
      "line": 222,
      "code": "console.log('📞 Fetching data for:', {\n          tenantId: profile.tenantId,\n          locationId",
      "match": "console.log('📞 Fetching data for:', {\n          tenantId: profile.tenantId,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 114,
      "code": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId",
      "match": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 139,
      "code": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId",
      "match": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 167,
      "code": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 464,
      "code": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 106,
      "code": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId",
      "match": "console.log('🔍 Branch-specific audits loaded:', {\n          branchId: selectedBranch.id,\n          branchName: selectedBranch.name,\n          locationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 131,
      "code": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId",
      "match": "console.log('🔍 Client-side filtered audits:', {\n          total: allAudits.length,\n          filtered: branchAudits.length,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 159,
      "code": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Quick Check Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 370,
      "code": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId",
      "match": "console.log('🔍 Full Audit Debug Info:', {\n        tenantId: profile.tenantId,\n        selectedBranch: selectedBranch,\n        branchId: selectedBranch.id,\n        correctedLocationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 613,
      "code": "console.log('🔍 Quick Check Debug:', {\n        branchName: selectedBranch.name,\n        branchId: selectedBranch.id,\n        locationId: locationId",
      "match": "console.log('🔍 Quick Check Debug:', {\n        branchName: selectedBranch.name,\n        branchId: selectedBranch.id,\n        locationId: locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 626,
      "code": "console.log('❌ No items found with:', { tenantId: profile.tenantId, locationId",
      "match": "console.log('❌ No items found with:', { tenantId: profile.tenantId, locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/LocationManagement.tsx",
      "line": 177,
      "code": "console.log('🏢 Location created with ID:', locationId",
      "match": "console.log('🏢 Location created with ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 177,
      "code": "console.log('[Analytics] Setting up inventory subscription for location:', locationId",
      "match": "console.log('[Analytics] Setting up inventory subscription for location:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 216,
      "code": "console.log('[Analytics] Setting up POS orders subscription for location:', locationId",
      "match": "console.log('[Analytics] Setting up POS orders subscription for location:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 223,
      "code": "console.log('[Analytics] Expected locationId:', locationId",
      "match": "console.log('[Analytics] Expected locationId:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 224,
      "code": "console.log('[Analytics] Sample order locationId",
      "match": "console.log('[Analytics] Sample order locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 230,
      "code": "console.log(`[Analytics] 🚫 Filtering out order ${order.id} with locationId: ${order.locationId} (expected: ${locationId",
      "match": "console.log(`[Analytics] 🚫 Filtering out order ${order.id} with locationId: ${order.locationId} (expected: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 239,
      "code": "console.log(`[Analytics] 🎯 DASHBOARD ANALYTICS: Showing ${filteredOrders.length} orders for branch ${locationId",
      "match": "console.log(`[Analytics] 🎯 DASHBOARD ANALYTICS: Showing ${filteredOrders.length} orders for branch ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MainDashboard.tsx",
      "line": 240,
      "code": "console.log('[Analytics] Dashboard orders:', filteredOrders.map(o => ({\n          id: o.id,\n          status: o.status,\n          total: o.total,\n          locationId: o.locationId",
      "match": "console.log('[Analytics] Dashboard orders:', filteredOrders.map(o => ({\n          id: o.id,\n          status: o.status,\n          total: o.total,\n          locationId: o.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MenuBuilder.tsx",
      "line": 332,
      "code": "console.log(`🎯 Expected locationId: ${locationId",
      "match": "console.log(`🎯 Expected locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/MenuBuilder.tsx",
      "line": 349,
      "code": "console.log(`     ${index + 1}. \"${item.name}\" - locationId: ${item.locationId",
      "match": "console.log(`     ${index + 1}. \"${item.name}\" - locationId: ${item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/POS.tsx",
      "line": 392,
      "code": "console.log('� Loading POS menu items FRESH from Firebase:', {\n          tenantId: profile.tenantId,\n          locationId",
      "match": "console.log('� Loading POS menu items FRESH from Firebase:', {\n          tenantId: profile.tenantId,\n          locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 250,
      "code": "console.log('[PaymentAnalytics] Location ID:', locationId",
      "match": "console.log('[PaymentAnalytics] Location ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 257,
      "code": "console.log('[PaymentAnalytics] 🔍 Sample order locationId",
      "match": "console.log('[PaymentAnalytics] 🔍 Sample order locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/addons.ts",
      "line": 65,
      "code": "console.log('Loading add-ons for:', { tenantId, locationId",
      "match": "console.log('Loading add-ons for:', { tenantId, locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 153,
      "code": "console.log(`🎯 BRANCH-ISOLATED QUERY: ${collectionName} for location ${locationId",
      "match": "console.log(`🎯 BRANCH-ISOLATED QUERY: ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 208,
      "code": "console.log(`✅ BRANCH DATA LOADED: ${items.length} items from ${collectionName} for location ${locationId",
      "match": "console.log(`✅ BRANCH DATA LOADED: ${items.length} items from ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 253,
      "code": "console.log(`✅ BRANCH DATA CREATED: ${docRef.id} in ${collectionName} for location ${locationId",
      "match": "console.log(`✅ BRANCH DATA CREATED: ${docRef.id} in ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 297,
      "code": "console.log(`✅ BRANCH DATA UPDATED: ${documentId} in ${collectionName} for location ${locationId",
      "match": "console.log(`✅ BRANCH DATA UPDATED: ${documentId} in ${collectionName} for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 441,
      "code": "console.log(`🗑️ DELETING contaminated item: ${data.name} (locationId: ${data.locationId",
      "match": "console.log(`🗑️ DELETING contaminated item: ${data.name} (locationId: ${data.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 588,
      "code": "console.log(`💳 [PaymentMethodSummary] BRANCH FILTERED: ${orders.length} orders for location \"${locationId",
      "match": "console.log(`💳 [PaymentMethodSummary] BRANCH FILTERED: ${orders.length} orders for location \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/enhancedAuth.ts",
      "line": 437,
      "code": "console.log('✅ Initial location created in root locations collection:', locationId",
      "match": "console.log('✅ Initial location created in root locations collection:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/enhancedDataExplorerPOS.ts",
      "line": 102,
      "code": "console.log(`🎯 ENHANCED DATA EXPLORER: Filtered from ${originalCount} to ${allOrders.length} orders for location ${locationId",
      "match": "console.log(`🎯 ENHANCED DATA EXPLORER: Filtered from ${originalCount} to ${allOrders.length} orders for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 89,
      "code": "console.log(`🎯 BRANCH-ISOLATED EXPENSE QUERY: fetching expenses for location ${locationId",
      "match": "console.log(`🎯 BRANCH-ISOLATED EXPENSE QUERY: fetching expenses for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 104,
      "code": "console.log(`✅ SERVER-SIDE FILTERED: ${expenses.length} expenses with locationId",
      "match": "console.log(`✅ SERVER-SIDE FILTERED: ${expenses.length} expenses with locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 108,
      "code": "console.log(`🔄 FALLBACK: No expenses found with locationId",
      "match": "console.log(`🔄 FALLBACK: No expenses found with locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 123,
      "code": "console.log(`✅ CLIENT-SIDE FILTERED: ${expenses.length} expenses (includes legacy expenses without locationId",
      "match": "console.log(`✅ CLIENT-SIDE FILTERED: ${expenses.length} expenses (includes legacy expenses without locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 142,
      "code": "console.log(`✅ FALLBACK FILTERING: ${expenses.length} expenses loaded for location ${locationId",
      "match": "console.log(`✅ FALLBACK FILTERING: ${expenses.length} expenses loaded for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 173,
      "code": "console.log(`🎯 BRANCH-ISOLATED EXPENSE SUBSCRIPTION: location ${locationId",
      "match": "console.log(`🎯 BRANCH-ISOLATED EXPENSE SUBSCRIPTION: location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 190,
      "code": "console.log(`✅ BRANCH-ISOLATED EXPENSE SUBSCRIPTION: ${filteredExpenses.length} expenses filtered for location ${locationId",
      "match": "console.log(`✅ BRANCH-ISOLATED EXPENSE SUBSCRIPTION: ${filteredExpenses.length} expenses filtered for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/expenses.ts",
      "line": 238,
      "code": "console.log(`✅ BRANCH-SPECIFIC EXPENSE CREATED: ${docRef.id} for location ${expense.locationId",
      "match": "console.log(`✅ BRANCH-SPECIFIC EXPENSE CREATED: ${docRef.id} for location ${expense.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/fixMenuItems.ts",
      "line": 19,
      "code": "console.log('🔧 Fixing menu items locationId",
      "match": "console.log('🔧 Fixing menu items locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/fixMenuItems.ts",
      "line": 122,
      "code": "console.log('🔧 Auto-fixing locationId",
      "match": "console.log('🔧 Auto-fixing locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 160,
      "code": "console.log('🚨 Location ID:', locationId",
      "match": "console.log('🚨 Location ID:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 296,
      "code": "console.log(`🔍 [INVENTORY DEDUCTION] Searching for inventory item by name: \"${itemName}\" in location: ${locationId",
      "match": "console.log(`🔍 [INVENTORY DEDUCTION] Searching for inventory item by name: \"${itemName}\" in location: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 305,
      "code": "console.log(`🎯 [INVENTORY DEDUCTION] Filtering by locationId: ${locationId",
      "match": "console.log(`🎯 [INVENTORY DEDUCTION] Filtering by locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/integration.ts",
      "line": 309,
      "code": "console.log(`⚠️ [INVENTORY DEDUCTION] No locationId",
      "match": "console.log(`⚠️ [INVENTORY DEDUCTION] No locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 878,
      "code": "console.log('Location-specific pricing calculated for:', menuItemId, 'at location:', locationId",
      "match": "console.log('Location-specific pricing calculated for:', menuItemId, 'at location:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1060,
      "code": "console.log(`🔍 getMenuItems called with tenantId: ${tenantId}, locationId: ${locationId",
      "match": "console.log(`🔍 getMenuItems called with tenantId: ${tenantId}, locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1066,
      "code": "console.log(`🔒 FORCING locationId filter: ${locationId",
      "match": "console.log(`🔒 FORCING locationId filter: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1069,
      "code": "console.log(`📊 Query with locationId",
      "match": "console.log(`📊 Query with locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1073,
      "code": "console.log(`📋 Item: ${data.name}, locationId: ${data.locationId",
      "match": "console.log(`📋 Item: ${data.name}, locationId: ${data.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1088,
      "code": "console.log(`✅ Final result: ${sortedItems.length} items for ${locationId",
      "match": "console.log(`✅ Final result: ${sortedItems.length} items for ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1129,
      "code": "console.log('🔧 addMenuItem: Starting with enhanced branch isolation:', {\n      name: item.name,\n      category: item.category,\n      price: item.price,\n      tenantId: item.tenantId,\n      locationId: item.locationId",
      "match": "console.log('🔧 addMenuItem: Starting with enhanced branch isolation:', {\n      name: item.name,\n      category: item.category,\n      price: item.price,\n      tenantId: item.tenantId,\n      locationId: item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1186,
      "code": "console.log(`✅ BRANCH-ISOLATED MENU ITEM CREATED: ${docId} for location ${item.locationId",
      "match": "console.log(`✅ BRANCH-ISOLATED MENU ITEM CREATED: ${docId} for location ${item.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1317,
      "code": "console.log(`🎯 SERVER-SIDE FILTERING: Querying only categories for locationId: ${locationId",
      "match": "console.log(`🎯 SERVER-SIDE FILTERING: Querying only categories for locationId: ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1321,
      "code": "console.log(`✅ Firebase query returned ${snapshot.size} categories for location ${locationId",
      "match": "console.log(`✅ Firebase query returned ${snapshot.size} categories for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1334,
      "code": "console.log(`� Firebase returned ${categories.length} categories:`, categories.map(cat => ({\n      id: cat.id,\n      name: cat.name,\n      locationId",
      "match": "console.log(`� Firebase returned ${categories.length} categories:`, categories.map(cat => ({\n      id: cat.id,\n      name: cat.name,\n      locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1368,
      "code": "console.log(`📂 Menu Categories: Loaded ${sortedCategories.length} categories${locationId ? ` for location ${locationId",
      "match": "console.log(`📂 Menu Categories: Loaded ${sortedCategories.length} categories${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1426,
      "code": "console.log(`✅ Default menu categories initialized successfully${locationId ? ` for location ${locationId",
      "match": "console.log(`✅ Default menu categories initialized successfully${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 137,
      "code": "console.log(`📦 POS: Loaded ${items.length} items${locationId ? ` for location ${locationId",
      "match": "console.log(`📦 POS: Loaded ${items.length} items${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 389,
      "code": "console.log(`📋 POS: Loaded ${orders.length} orders${locationId ? ` for location ${locationId",
      "match": "console.log(`📋 POS: Loaded ${orders.length} orders${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 403,
      "code": "console.log('[subscribeToPOSOrders] Starting subscription with locationId:', locationId",
      "match": "console.log('[subscribeToPOSOrders] Starting subscription with locationId:', locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 416,
      "code": "console.log('[subscribeToPOSOrders] All locationIds:', orders.map(o => o.locationId",
      "match": "console.log('[subscribeToPOSOrders] All locationIds:', orders.map(o => o.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 424,
      "code": "console.log(`[subscribeToPOSOrders] 🚫 Filtering out order ${order.id}: \"${order.locationId}\" !== \"${locationId",
      "match": "console.log(`[subscribeToPOSOrders] 🚫 Filtering out order ${order.id}: \"${order.locationId}\" !== \"${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/pos.ts",
      "line": 430,
      "code": "console.log('[subscribeToPOSOrders] No locationId",
      "match": "console.log('[subscribeToPOSOrders] No locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 196,
      "code": "console.log(`📋 PO: Loaded ${orders.length} purchase orders${locationId ? ` for location ${locationId",
      "match": "console.log(`📋 PO: Loaded ${orders.length} purchase orders${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/purchaseOrders.ts",
      "line": 244,
      "code": "console.log(`🔄 PO: Real-time update - ${orders.length} purchase orders${locationId ? ` for location ${locationId",
      "match": "console.log(`🔄 PO: Real-time update - ${orders.length} purchase orders${locationId ? ` for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/salesDetective.ts",
      "line": 183,
      "code": "console.log(`      ${index + 1}. ${doc.id}: location=${doc.locationId",
      "match": "console.log(`      ${index + 1}. ${doc.id}: location=${doc.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/shifts.ts",
      "line": 26,
      "code": "console.log('🔄 Creating shift:', { \n      locationId: shiftData.locationId",
      "match": "console.log('🔄 Creating shift:', { \n      locationId: shiftData.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/shifts.ts",
      "line": 234,
      "code": "console.log(`Performing daily reset for location ${locationId",
      "match": "console.log(`Performing daily reset for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/firebase/shifts.ts",
      "line": 259,
      "code": "console.log(`Daily reset completed for location ${locationId",
      "match": "console.log(`Daily reset completed for location ${locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 339,
      "code": "console.log(`⚠️ WARNING: No documents found in ${collectionName} for location ${this.locationId",
      "match": "console.log(`⚠️ WARNING: No documents found in ${collectionName} for location ${this.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 472,
      "code": "console.log(`🗑️ SAFE DELETE: ${snapshot.size} documents from ${collectionName} collection (location: ${this.locationId",
      "match": "console.log(`🗑️ SAFE DELETE: ${snapshot.size} documents from ${collectionName} collection (location: ${this.locationId"
    },
    {
      "type": "LOW",
      "description": "LocationId logged to console - potential information disclosure",
      "category": "information_disclosure",
      "file": "src/lib/utils/logoutUtils.ts",
      "line": 40,
      "code": "console.log('✅ Active shift ended at current branch before sign out:', locationId",
      "match": "console.log('✅ Active shift ended at current branch before sign out:', locationId"
    }
  ],
  "bestPractices": [
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/addons.ts",
      "line": 70,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/analytics.ts",
      "line": 116,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 149,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 46,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 139,
      "match": "createBranchQuery"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 160,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 167,
      "match": "createBranchQuery"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 175,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 226,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 272,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 335,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 355,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 375,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 395,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 465,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 472,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 479,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 486,
      "match": "getBranchData"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 578,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/expenses.ts",
      "line": 94,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/integration.ts",
      "line": 304,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventory.ts",
      "line": 126,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventory.ts",
      "line": 174,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 94,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventoryVerification.ts",
      "line": 16,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 85,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 95,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 137,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 143,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 174,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1067,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1318,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Importing branch isolation module",
      "category": "proper_imports",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 18,
      "match": "branchDataIsolation"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 101,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/shifts.ts",
      "line": 85,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/shifts.ts",
      "line": 122,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 117,
      "match": "where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 126,
      "match": "where('locationId', '==', branchId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 203,
      "match": "where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 212,
      "match": "where('locationId', '==', branchId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 104,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 96,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 122,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 166,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 376,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 103,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/ShiftManagement/EndShiftModal.tsx",
      "line": 192,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/ShiftManagement/ShiftControlPanel.tsx",
      "line": 62,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/ShiftManagement/ShiftDashboard.tsx",
      "line": 81,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/ShiftManagement/ShiftLockScreen.tsx",
      "line": 86,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/ShiftManagement/ShiftStatusBar.tsx",
      "line": 54,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 117,
      "match": "where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 126,
      "match": "where('locationId', '==', branchId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 203,
      "match": "where('locationId', '==', locationIdWithPrefix)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/CapitalIntelligence.tsx",
      "line": 212,
      "match": "where('locationId', '==', branchId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy.tsx",
      "line": 104,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy_BACKUP.tsx",
      "line": 96,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 122,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/InventoryDiscrepancy_Complex_Backup.tsx",
      "line": 166,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/components/modules/PaymentMethodsAnalytics.tsx",
      "line": 376,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 184,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 445,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 529,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 549,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 565,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/context/BranchContext.tsx",
      "line": 594,
      "match": "getBranchData"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/addons.ts",
      "line": 70,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/analytics.ts",
      "line": 116,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 149,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 46,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 139,
      "match": "createBranchQuery"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 160,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 167,
      "match": "createBranchQuery"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 175,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 226,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 272,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 335,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 355,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 375,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 395,
      "match": "validateBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 465,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 472,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 479,
      "match": "getBranchData"
    },
    {
      "description": "Using branch isolation utility functions",
      "category": "utility_usage",
      "file": "src/lib/firebase/branchDataIsolation.ts",
      "line": 486,
      "match": "getBranchData"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/cashManagement.ts",
      "line": 578,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/expenses.ts",
      "line": 94,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/integration.ts",
      "line": 304,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventory.ts",
      "line": 126,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventory.ts",
      "line": 174,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventoryAnalytics.ts",
      "line": 94,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/inventoryVerification.ts",
      "line": 16,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 85,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 95,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 137,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 143,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/locationManagement.ts",
      "line": 174,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1067,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 1318,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Importing branch isolation module",
      "category": "proper_imports",
      "file": "src/lib/firebase/menuBuilder.ts",
      "line": 18,
      "match": "branchDataIsolation"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/shiftManagement.ts",
      "line": 101,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/shifts.ts",
      "line": 85,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/firebase/shifts.ts",
      "line": 122,
      "match": "where('locationId', '==', locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 210,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 291,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 311,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 333,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 445,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 469,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/services/ShiftResetService.ts",
      "line": 592,
      "match": "where('locationId', '==', this.locationId)"
    },
    {
      "description": "Proper locationId filtering implemented",
      "category": "proper_filtering",
      "file": "src/lib/utils/shiftReportGenerator.ts",
      "line": 133,
      "match": "where('locationId', '==', locationId)"
    }
  ],
  "recommendations": [
    "Fix critical vulnerabilities immediately",
    "Improve query filtering ratio",
    "Add locationId filters"
  ]
}