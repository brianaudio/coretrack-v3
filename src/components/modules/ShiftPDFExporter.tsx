'use client'

import { useState } from 'react'
import { useShift } from '../../lib/context/ShiftContext'
import { useAuth } from '../../lib/context/AuthContext'
import { useBranch } from '../../lib/context/BranchContext'
import jsPDF from 'jspdf'

interface ShiftReportData {
  shiftInfo: any
  summary: any
  transactions: any[]
  expenses: any[]
}

export default function ShiftPDFExporter() {
  const { profile } = useAuth()
  const { selectedBranch } = useBranch()
  const { currentShift, getShiftSummary } = useShift()
  
  const [exporting, setExporting] = useState(false)
  const [reportType, setReportType] = useState<'current' | 'summary' | 'detailed'>('summary')

  const generateShiftPDF = async (shiftData: ShiftReportData) => {
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.width
    const pageHeight = pdf.internal.pageSize.height
    let yPos = 20

    // Header
    pdf.setFontSize(20)
    pdf.setFont('helvetica', 'bold')
    pdf.text('CoreTrack - Shift Report', pageWidth / 2, yPos, { align: 'center' })
    yPos += 15

    // Business Info
    pdf.setFontSize(12)
    pdf.setFont('helvetica', 'normal')
    pdf.text(`Business: ${profile?.displayName || 'N/A'}`, 20, yPos)
    yPos += 8
    pdf.text(`Branch: ${selectedBranch?.name || 'N/A'}`, 20, yPos)
    yPos += 8
    pdf.text(`Generated: ${new Date().toLocaleString()}`, 20, yPos)
    yPos += 15

    // Shift Information
    pdf.setFontSize(16)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Shift Information', 20, yPos)
    yPos += 12

    pdf.setFontSize(11)
    pdf.setFont('helvetica', 'normal')
    
    const shiftInfo = [
      ['Shift Name:', shiftData.shiftInfo?.name || 'N/A'],
      ['Start Time:', shiftData.shiftInfo?.startTime ? new Date(shiftData.shiftInfo.startTime.toDate()).toLocaleString() : 'N/A'],
      ['End Time:', shiftData.shiftInfo?.endTime ? new Date(shiftData.shiftInfo.endTime.toDate()).toLocaleString() : 'Active'],
      ['Duration:', calculateDuration(shiftData.shiftInfo?.startTime, shiftData.shiftInfo?.endTime)],
      ['Started By:', shiftData.shiftInfo?.createdBy || 'N/A'],
      ['Ended By:', shiftData.shiftInfo?.metadata?.endedBy || 'N/A'],
    ]

    shiftInfo.forEach(([label, value]) => {
      pdf.text(label, 20, yPos)
      pdf.text(value, 80, yPos)
      yPos += 7
    })

    yPos += 10

    // Financial Summary
    pdf.setFontSize(16)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Financial Summary', 20, yPos)
    yPos += 12

    pdf.setFontSize(11)
    pdf.setFont('helvetica', 'normal')

    const financialData = [
      ['Total Sales:', `â‚±${shiftData.summary?.totalSales?.toLocaleString() || '0.00'}`],
      ['Total Orders:', `${shiftData.summary?.totalOrders || 0}`],
      ['Total Expenses:', `â‚±${shiftData.summary?.totalExpenses?.toLocaleString() || '0.00'}`],
      ['Net Profit:', `â‚±${(shiftData.summary?.totalSales - shiftData.summary?.totalExpenses || 0).toLocaleString()}`],
      ['Cash Float:', `â‚±${shiftData.shiftInfo?.metadata?.cashFloat?.toLocaleString() || '0.00'}`],
    ]

    financialData.forEach(([label, value]) => {
      pdf.text(label, 20, yPos)
      pdf.text(value, 80, yPos)
      yPos += 7
    })

    // Add new page if needed
    if (yPos > pageHeight - 50) {
      pdf.addPage()
      yPos = 20
    }

    yPos += 15

    // Transaction Summary (if detailed report)
    if (reportType === 'detailed' && shiftData.transactions?.length > 0) {
      pdf.setFontSize(16)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Transaction Details', 20, yPos)
      yPos += 12

      pdf.setFontSize(10)
      pdf.setFont('helvetica', 'bold')
      pdf.text('Time', 20, yPos)
      pdf.text('Order ID', 60, yPos)
      pdf.text('Amount', 120, yPos)
      pdf.text('Items', 150, yPos)
      yPos += 8

      pdf.setFont('helvetica', 'normal')
      shiftData.transactions.slice(0, 20).forEach((transaction) => {
        if (yPos > pageHeight - 20) {
          pdf.addPage()
          yPos = 20
        }

        const time = new Date(transaction.createdAt?.toDate()).toLocaleTimeString()
        const amount = `â‚±${transaction.total?.toLocaleString() || '0.00'}`
        const itemCount = transaction.items?.length || 0

        pdf.text(time, 20, yPos)
        pdf.text(transaction.id?.substring(0, 8) || 'N/A', 60, yPos)
        pdf.text(amount, 120, yPos)
        pdf.text(`${itemCount} items`, 150, yPos)
        yPos += 6
      })
    }

    // Footer
    const footerY = pageHeight - 15
    pdf.setFontSize(8)
    pdf.setFont('helvetica', 'italic')
    pdf.text('Generated by CoreTrack - Business Management System', pageWidth / 2, footerY, { align: 'center' })

    return pdf
  }

  const calculateDuration = (startTime: any, endTime: any) => {
    if (!startTime) return 'Unknown'
    
    const start = startTime.toDate()
    const end = endTime ? endTime.toDate() : new Date()
    const diff = end.getTime() - start.getTime()
    
    const hours = Math.floor(diff / (1000 * 60 * 60))
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))
    
    return `${hours}h ${minutes}m`
  }

  const handleExportPDF = async () => {
    if (!currentShift) return

    setExporting(true)
    try {
      // Get shift summary and data
      const summary = await getShiftSummary()
      
      const reportData: ShiftReportData = {
        shiftInfo: currentShift,
        summary: summary,
        transactions: [], // Would fetch from POS orders
        expenses: [] // Would fetch from expenses
      }

      const pdf = await generateShiftPDF(reportData)
      
      // Generate filename
      const date = new Date().toISOString().split('T')[0]
      const shiftName = currentShift.name.replace(/\s+/g, '_')
      const filename = `Shift_Report_${shiftName}_${date}.pdf`
      
      // Download PDF
      pdf.save(filename)
      
    } catch (error) {
      console.error('Failed to export PDF:', error)
      alert('Failed to export PDF. Please try again.')
    } finally {
      setExporting(false)
    }
  }

  if (!currentShift) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-surface-200 p-6">
        <div className="text-center py-8">
          <svg className="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <p className="text-gray-500">No active shift to export</p>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-xl shadow-sm border border-surface-200 p-6">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-surface-900">Export Shift Report</h3>
          <p className="text-sm text-surface-600">Generate PDF reports for current shift</p>
        </div>
        <div className="flex items-center gap-2">
          <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
          </svg>
          <span className="text-sm font-medium text-surface-700">PDF Export</span>
        </div>
      </div>

      {/* Report Type Selection */}
      <div className="space-y-4 mb-6">
        <div>
          <label className="block text-sm font-medium text-surface-700 mb-3">Report Type</label>
          <div className="grid grid-cols-1 gap-3">
            {[
              { id: 'summary', name: 'Summary Report', desc: 'Basic shift information and totals', icon: 'ðŸ“‹' },
              { id: 'detailed', name: 'Detailed Report', desc: 'Complete transaction and expense details', icon: 'ðŸ“Š' },
            ].map((type) => (
              <button
                key={type.id}
                onClick={() => setReportType(type.id as any)}
                className={`p-4 rounded-lg border-2 transition-all text-left ${
                  reportType === type.id
                    ? 'border-primary-500 bg-primary-50'
                    : 'border-gray-200 hover:border-gray-300'
                }`}
              >
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{type.icon}</span>
                  <div>
                    <p className="font-medium text-surface-900">{type.name}</p>
                    <p className="text-sm text-surface-600">{type.desc}</p>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Current Shift Preview */}
        <div className="p-4 bg-surface-50 rounded-lg">
          <h4 className="font-medium text-surface-900 mb-2">Current Shift: {currentShift.name}</h4>
          <div className="text-sm text-surface-600 space-y-1">
            <p>Started: {new Date(currentShift.startTime.toDate()).toLocaleString()}</p>
            <p>Duration: {calculateDuration(currentShift.startTime, null)}</p>
            <p>Status: <span className="text-green-600 font-medium">Active</span></p>
          </div>
        </div>

        {/* Export Button */}
        <button
          onClick={handleExportPDF}
          disabled={exporting}
          className="w-full bg-red-600 hover:bg-red-700 disabled:bg-gray-300 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center justify-center gap-2"
        >
          {exporting ? (
            <>
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              Generating PDF...
            </>
          ) : (
            <>
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
              </svg>
              Export {reportType === 'summary' ? 'Summary' : 'Detailed'} PDF
            </>
          )}
        </button>
      </div>
    </div>
  )
}
