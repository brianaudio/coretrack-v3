'use client'import { useState, useEffect } from 'react'import { useShift } from '../../lib/context/ShiftContext'import { useAuth } from '../../lib/context/AuthContext'import { useBranch } from '../../lib/context/BranchContext'import { Timestamp } from 'firebase/firestore'import { format } from 'date-fns'// Enterprise shift presets with professional designconst SHIFT_PRESETS = [  {     id: 'morning',     name: 'Morning Shift',     time: '6:00 AM - 2:00 PM',     duration: '8h',    icon: '🌅',    color: 'bg-gradient-to-br from-orange-50 to-yellow-50 border-orange-200 hover:border-orange-300'  },  {     id: 'afternoon',     name: 'Afternoon Shift',     time: '2:00 PM - 10:00 PM',     duration: '8h',    icon: '☀️',    color: 'bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200 hover:border-blue-300'  },  {     id: 'evening',     name: 'Evening Shift',     time: '6:00 PM - 2:00 AM',     duration: '8h',    icon: '🌆',    color: 'bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200 hover:border-purple-300'  },  {     id: 'night',     name: 'Night Shift',     time: '10:00 PM - 6:00 AM',     duration: '8h',    icon: '🌙',    color: 'bg-gradient-to-br from-indigo-50 to-blue-50 border-indigo-200 hover:border-indigo-300'  },  {     id: 'weekend',     name: 'Weekend Shift',     time: 'Flexible Hours',     duration: 'Flex',    icon: '🎉',    color: 'bg-gradient-to-br from-green-50 to-emerald-50 border-green-200 hover:border-green-300'  },  {     id: 'custom',     name: 'Custom Shift',     time: 'Custom Hours',     duration: 'Custom',    icon: '⚙️',    color: 'bg-gradient-to-br from-gray-50 to-slate-50 border-gray-200 hover:border-gray-300'  }]export default function ShiftControlPanel() {  const { profile } = useAuth()  const { selectedBranch } = useBranch()  const {    currentShift,    loading,    error,    startNewShift,    isShiftActive  } = useShift()  const [showStartModal, setShowStartModal] = useState(false)  const [showEndModal, setShowEndModal] = useState(false)  // Enhanced form states with professional structure  const [selectedPreset, setSelectedPreset] = useState('')  const [customShiftName, setCustomShiftName] = useState('')  const [cashFloat, setCashFloat] = useState('')  const [notes, setNotes] = useState('')  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false)  // Real-time shift information  const [shiftDuration, setShiftDuration] = useState('')  // Update shift duration every minute  useEffect(() => {    const updateDuration = () => {      if (currentShift?.startTime) {        const start = currentShift.startTime instanceof Timestamp           ? currentShift.startTime.toDate()           : new Date(currentShift.startTime)        const now = new Date()        const diffMs = now.getTime() - start.getTime()        const hours = Math.floor(diffMs / (1000 * 60 * 60))        const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60))        setShiftDuration(`${hours}h ${minutes}m`)      }    }    if (isShiftActive) {      updateDuration()      const interval = setInterval(updateDuration, 60000) // Update every minute      return () => clearInterval(interval)    }  }, [currentShift, isShiftActive])  const handleStartShift = async () => {    try {      let finalShiftName = ''      if (selectedPreset && selectedPreset !== 'custom') {        const preset = SHIFT_PRESETS.find(p => p.id === selectedPreset)        finalShiftName = preset?.name || ''      } else if (selectedPreset === 'custom' || customShiftName) {        finalShiftName = customShiftName      }      if (!finalShiftName) {        const now = new Date()        const timeString = format(now, 'h:mm a')        finalShiftName = `Shift - ${timeString}`      }      await startNewShift(finalShiftName, parseFloat(cashFloat) || 0)      // Reset form      setShowStartModal(false)      setSelectedPreset('')      setCustomShiftName('')      setCashFloat('')      setNotes('')      setShowAdvancedOptions(false)          } catch (error) {      console.error('Failed to start shift:', error)      alert('Failed to start shift. Please try again.')    }  }  const handleEndShift = async () => {    try {      if (currentShift?.id) {        console.log('Ending shift:', currentShift.id)        setShowEndModal(false)        // Note: End shift functionality would need to be implemented in ShiftContext      }    } catch (error) {      console.error('Failed to end shift:', error)      alert('Failed to end shift. Please try again.')    }  }  const formatShiftTime = (timestamp: any) => {    if (!timestamp) return 'Unknown'    const date = timestamp instanceof Timestamp ? timestamp.toDate() : new Date(timestamp)    return format(date, 'MMM d, h:mm a')  }  const getShiftName = () => {    return currentShift?.name || 'Current Shift'  }  return (    <div className="space-y-8">      {/* Current Shift Status Card */}      {isShiftActive && currentShift ? (        <div className="card p-8 bg-gradient-to-r from-primary-50 to-blue-50 border-primary-200">          <div className="flex items-center justify-between">            <div className="flex items-center space-x-4">              <div className="w-12 h-12 bg-primary-500 rounded-2xl flex items-center justify-center">                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />                </svg>              </div>              <div>                <h3 className="text-lg font-semibold text-surface-900">{getShiftName()}</h3>                <div className="flex items-center space-x-4 text-sm text-surface-600 mt-1">                  <span>Started: {formatShiftTime(currentShift.startTime)}</span>                  <span className="w-1 h-1 bg-surface-400 rounded-full"></span>                  <span>Duration: {shiftDuration}</span>                  <span className="w-1 h-1 bg-surface-400 rounded-full"></span>                  <span className="inline-flex items-center">                    <div className="w-2 h-2 bg-green-400 rounded-full mr-1.5 animate-pulse"></div>                    Active                  </span>                </div>              </div>            </div>            <button              onClick={() => setShowEndModal(true)}              className="btn-primary bg-red-600 hover:bg-red-700 px-6 py-3"            >              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 10l6 6m0-6l-6 6" />              </svg>              End Shift            </button>          </div>        </div>      ) : (        /* Start Shift Card */        <div className="card p-8">          <div className="text-center">            <div className="w-16 h-16 bg-surface-100 rounded-3xl flex items-center justify-center mx-auto mb-6">              <svg className="w-8 h-8 text-surface-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />              </svg>            </div>            <h3 className="text-xl font-semibold text-surface-900 mb-2">No Active Shift</h3>            <p className="text-surface-600 mb-6">Start a new shift to begin tracking your work session</p>            <button              onClick={() => setShowStartModal(true)}              className="btn-primary"              disabled={loading}            >              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />              </svg>              {loading ? 'Starting...' : 'Start New Shift'}            </button>          </div>        </div>      )}      {/* Error Display */}      {error && (        <div className="card p-6 bg-red-50 border-red-200">          <div className="flex items-center">            <svg className="w-5 h-5 text-red-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />            </svg>            <span className="text-red-800 font-medium">Error:</span>            <span className="text-red-700 ml-2">{error}</span>          </div>        </div>      )}      {/* Start Shift Modal */}      {showStartModal && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="card max-w-2xl w-full mx-4 p-0 overflow-hidden">            {/* Modal Header */}            <div className="bg-gradient-to-r from-primary-500 to-blue-600 px-8 py-6">              <div className="flex items-center justify-between">                <div>                  <h3 className="text-xl font-semibold text-white">Start New Shift</h3>                  <p className="text-primary-100 mt-1">Choose a preset or create a custom shift</p>                </div>                <button                  onClick={() => setShowStartModal(false)}                  className="text-white hover:text-primary-100 transition-colors"                >                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />                  </svg>                </button>              </div>            </div>            {/* Modal Content */}            <div className="p-8">              {/* Shift Presets Grid */}              <div className="mb-8">                <h4 className="text-lg font-medium text-surface-900 mb-4">Select Shift Type</h4>                <div className="grid grid-cols-2 lg:grid-cols-3 gap-4">                  {SHIFT_PRESETS.map((preset) => (                    <button                      key={preset.id}                      onClick={() => setSelectedPreset(preset.id)}                      className={`${preset.color} border-2 rounded-2xl p-4 text-left transition-all duration-200 transform hover:scale-105 ${                        selectedPreset === preset.id ? 'ring-2 ring-primary-500 ring-offset-2' : ''                      }`}                    >                      <div className="text-2xl mb-2">{preset.icon}</div>                      <div className="text-sm font-semibold text-surface-900">{preset.name}</div>                      <div className="text-xs text-surface-600 mt-1">{preset.time}</div>                      <div className="text-xs text-surface-500 mt-1">Duration: {preset.duration}</div>                    </button>                  ))}                </div>              </div>              {/* Custom Shift Name */}              {selectedPreset === 'custom' && (                <div className="mb-6">                  <label className="block text-sm font-medium text-surface-700 mb-2">                    Custom Shift Name                  </label>                  <input                    type="text"                    value={customShiftName}                    onChange={(e) => setCustomShiftName(e.target.value)}                    className="input-field"                    placeholder="Enter custom shift name"                  />                </div>              )}              {/* Advanced Options */}              <div className="mb-6">                <button                  onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}                  className="flex items-center text-primary-600 hover:text-primary-700 font-medium"                >                  <svg                     className={`w-5 h-5 mr-2 transform transition-transform ${showAdvancedOptions ? 'rotate-90' : ''}`}                     fill="none" stroke="currentColor" viewBox="0 0 24 24"                  >                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />                  </svg>                  Advanced Options                </button>                {showAdvancedOptions && (                  <div className="mt-4 space-y-4 bg-surface-50 rounded-xl p-4">                    <div>                      <label className="block text-sm font-medium text-surface-700 mb-2">                        Opening Cash Float                      </label>                      <div className="relative">                        <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-surface-500">₱</span>                        <input                          type="number"                          value={cashFloat}                          onChange={(e) => setCashFloat(e.target.value)}                          className="input-field pl-8"                          placeholder="0.00"                          step="0.01"                        />                      </div>                    </div>                    <div>                      <label className="block text-sm font-medium text-surface-700 mb-2">                        Shift Notes                      </label>                      <textarea                        value={notes}                        onChange={(e) => setNotes(e.target.value)}                        className="input-field h-20 resize-none"                        placeholder="Add any notes for this shift..."                      />                    </div>                  </div>                )}              </div>              {/* Modal Actions */}              <div className="flex justify-between">                <button                  onClick={() => setShowStartModal(false)}                  className="btn-secondary"                >                  Cancel                </button>                <button                  onClick={handleStartShift}                  disabled={loading || (!selectedPreset && !customShiftName)}                  className="btn-primary"                >                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />                  </svg>                  {loading ? 'Starting...' : 'Start Shift'}                </button>              </div>            </div>          </div>        </div>      )}      {/* End Shift Modal */}      {showEndModal && (        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">          <div className="card max-w-md w-full mx-4 p-0 overflow-hidden">            <div className="bg-gradient-to-r from-red-500 to-pink-600 px-6 py-4">              <h3 className="text-lg font-semibold text-white">End Current Shift</h3>            </div>            <div className="p-6">              <p className="text-surface-700 mb-6">                Are you sure you want to end your current shift? This action cannot be undone.              </p>              <div className="flex justify-end space-x-3">                <button                  onClick={() => setShowEndModal(false)}                  className="btn-secondary"                >                  Cancel                </button>                <button                  onClick={handleEndShift}                  className="btn-primary bg-red-600 hover:bg-red-700"                >                  End Shift                </button>              </div>            </div>          </div>        </div>      )}    </div>  )}