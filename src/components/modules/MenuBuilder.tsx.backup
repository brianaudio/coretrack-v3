'use client'

import { useState, useEffect, useMemo } from 'react'
import { useAuth } from '../../lib/context/AuthContext'
import { useBranch } from '../../lib/context/BranchContext'
import { getBranchLocationId } from '../../lib/utils/branchUtils'
import { 
  getMenuItems, 
  addMenuItem, 
  updateMenuItem, 
  deleteMenuItem,
  getMenuCategories,
  initializeDefaultAddonCategories,
  type MenuItem,
  type MenuCategory,
  type CreateMenuItem,
  type MenuIngredient
} from '../../lib/firebase/menuBuilder'
import { 
  getInventoryItems,
  type InventoryItem
} from '../../lib/firebase/inventory'
import {
  getAddons,
  createAddon,
  updateAddon,
  deleteAddon,
  toggleAddonStatus,
  type Addon,
  type CreateAddon
} from '../../lib/firebase/addons'
import {
  syncMenuItemToPOS,
  handleMenuItemUpdate,
  handleMenuItemDeletion,
  getAffectedMenuItems
} from '../../lib/firebase/integration'
import CreateMenuItemModal from './CreateMenuItemModal'

export default function MenuBuilder() {
  const { profile } = useAuth()
  const { selectedBranch } = useBranch()
  
  const [menuItems, setMenuItems] = useState<MenuItem[]>([])
  const [categories, setCategories] = useState<MenuCategory[]>([])
  const [inventoryItems, setInventoryItems] = useState<InventoryItem[]>([])
  const [addons, setAddons] = useState<Addon[]>([])
  const [loading, setLoading] = useState(true)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [editingItem, setEditingItem] = useState<MenuItem | null>(null)
  const [categoryFilter, setCategoryFilter] = useState('all')
  const [statusFilter, setStatusFilter] = useState('all')
  const [stockFilter, setStockFilter] = useState('all')
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set())
  const [bulkMode, setBulkMode] = useState(false)
  const [sortBy, setSortBy] = useState('name')
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc')
  const [activeTab, setActiveTab] = useState<'menu-items' | 'addons'>('menu-items')

  // Note: newItem state removed as CreateMenuItemModal handles its own state

  // Load menu items and categories
  useEffect(() => {
    if (!profile?.tenantId || !selectedBranch) {
      return
    }

    const loadData = async () => {
      try {
        setLoading(true)
        const locationId = getBranchLocationId(selectedBranch.id)
        
        // 🎯 Initialize default add-on categories first
        await initializeDefaultAddonCategories(profile.tenantId)
        
        const [itemsData, categoriesData, inventoryData, addonsData] = await Promise.all([
          getMenuItems(profile.tenantId, locationId),
          getMenuCategories(profile.tenantId),
          getInventoryItems(profile.tenantId, locationId),
          getAddons(profile.tenantId, locationId)
        ])
        setMenuItems(itemsData)
        setCategories(categoriesData)
        setInventoryItems(inventoryData)
        setAddons(addonsData)
      } catch (error) {
        // Optionally log error
      } finally {
        setLoading(false)
      }
    }

    loadData()
  }, [profile?.tenantId, selectedBranch?.id])

  // Note: handleCreateMenuItem is now handled by the CreateMenuItemModal component

  const handleUpdateMenuItem = async () => {
    if (!profile?.tenantId || !editingItem) return

    try {
      await updateMenuItem(profile.tenantId, editingItem.id!, {
        name: editingItem.name,
        description: editingItem.description,
        price: editingItem.price,
        status: editingItem.status,
        emoji: editingItem.emoji || undefined,
        ingredients: editingItem.ingredients
      })
      
      // Update local state
      setMenuItems(prev => prev.map(item => 
        item.id === editingItem.id ? editingItem : item
      ))
      
      // Sync changes to POS (silent sync)
      try {
        await handleMenuItemUpdate(editingItem)
        console.log('✅ Menu item updated and synced to POS:', editingItem.name)
      } catch (syncError) {
        console.error('❌ Error syncing update to POS:', syncError)
      }
      
      setEditingItem(null)
    } catch (error) {
      console.error('Error updating menu item:', error)
      alert('Error updating menu item. Please try again.')
    }
  }

  const handleDeleteMenuItem = async (itemId: string) => {
    if (!profile?.tenantId || !confirm('Are you sure you want to delete this menu item?')) return

    try {
      await deleteMenuItem(profile.tenantId, itemId)
      
      // Remove from POS system (silent sync)
      try {
        await handleMenuItemDeletion(profile.tenantId, itemId)
        console.log('✅ Menu item deleted and removed from POS')
      } catch (syncError) {
        console.error('❌ Error removing from POS:', syncError)
      }
      
      setMenuItems(prev => prev.filter(item => item.id !== itemId))
    } catch (error) {
      console.error('Error deleting menu item:', error)
      alert('Error deleting menu item. Please try again.')
    }
  }

  // Note: handleDuplicateMenuItem removed - will be handled by CreateMenuItemModal when duplicate feature is needed

  // Bulk action functions
  const handleSelectItem = (itemId: string) => {
    setSelectedItems(prev => {
      const newSet = new Set(prev)
      if (newSet.has(itemId)) {
        newSet.delete(itemId)
      } else {
        newSet.add(itemId)
      }
      return newSet
    })
  }

  const handleSelectAll = () => {
    const filteredItems = getFilteredItems()
    setSelectedItems(new Set(filteredItems.map(item => item.id!)))
  }

  const handleDeselectAll = () => {
    setSelectedItems(new Set())
  }

  const handleBulkStatusChange = async (newStatus: 'active' | 'inactive') => {
    if (!profile?.tenantId || selectedItems.size === 0) return
    
    try {
      const updatePromises = Array.from(selectedItems).map(itemId =>
        updateMenuItem(profile.tenantId, itemId, { status: newStatus })
      )
      
      await Promise.all(updatePromises)
      
      // Update local state
      setMenuItems(prev => prev.map(item => 
        selectedItems.has(item.id!) ? { ...item, status: newStatus } : item
      ))
      
      // Clear selection
      setSelectedItems(new Set())
      setBulkMode(false)
    } catch (error) {
      console.error('Error updating items status:', error)
    }
  }

  const handleBulkDelete = async () => {
    if (!profile?.tenantId || selectedItems.size === 0) return
    
    const confirmMessage = `Are you sure you want to delete ${selectedItems.size} product(s)?`
    if (!confirm(confirmMessage)) return
    
    try {
      const deletePromises = Array.from(selectedItems).map(itemId =>
        deleteMenuItem(profile.tenantId, itemId)
      )
      
      await Promise.all(deletePromises)
      
      // Update local state
      setMenuItems(prev => prev.filter(item => !selectedItems.has(item.id!)))
      
      // Clear selection
      setSelectedItems(new Set())
      setBulkMode(false)
    } catch (error) {
      console.error('Error deleting items:', error)
    }
  }

  // Sorting functions
  const handleSortChange = (newSortBy: string) => {
    if (sortBy === newSortBy) {
      // Toggle sort order if same field
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      // New field, default to ascending
      setSortBy(newSortBy)
      setSortOrder('asc')
    }
  }

  const getSortLabel = (field: string) => {
    const labels: { [key: string]: string } = {
      name: 'Name',
      price: 'Price',
      cost: 'Cost',
      margin: 'Profit Margin',
      category: 'Category',
      status: 'Status'
    }
    return labels[field] || field
  }

  const toggleStatus = async (item: MenuItem) => {
    if (!profile?.tenantId) return

    try {
      const newStatus = item.status === 'active' ? 'inactive' : 'active'
      await updateMenuItem(profile.tenantId, item.id!, { status: newStatus })
      
      // Update local state
      setMenuItems(prev => prev.map(menuItem => 
        menuItem.id === item.id ? { ...menuItem, status: newStatus } : menuItem
      ))
    } catch (error) {
      console.error('Error toggling status:', error)
    }
  }

  // Note: Ingredient management functions removed - now handled by CreateMenuItemModal

  // Helper functions for ingredient management in edit mode
  const addIngredientToEdit = () => {
    setEditingItem(prev => prev ? ({
      ...prev,
      ingredients: [...prev.ingredients, {
        inventoryItemId: '',
        inventoryItemName: '',
        quantity: 0,
        unit: '',
        cost: 0
      }]
    }) : null)
  }

  const updateIngredientInEdit = (index: number, field: keyof MenuIngredient, value: any) => {
    setEditingItem(prev => prev ? ({
      ...prev,
      ingredients: prev.ingredients.map((ingredient, i) => {
        if (i !== index) return ingredient
        
        const updatedIngredient = { ...ingredient, [field]: value }
        
        // Auto-populate details when inventory item is selected
        if (field === 'inventoryItemId' && value) {
          const inventoryItem = inventoryItems.find(item => item.id === value)
          if (inventoryItem) {
            updatedIngredient.inventoryItemName = inventoryItem.name
            updatedIngredient.unit = inventoryItem.unit
            updatedIngredient.cost = (inventoryItem.costPerUnit || 0) * updatedIngredient.quantity
          }
        }
        
        // Recalculate cost when quantity changes
        if (field === 'quantity') {
          const inventoryItem = inventoryItems.find(item => item.id === updatedIngredient.inventoryItemId)
          if (inventoryItem && inventoryItem.costPerUnit) {
            updatedIngredient.cost = inventoryItem.costPerUnit * value
          }
        }
        
        return updatedIngredient
      })
    }) : null)
  }

  const removeIngredientFromEdit = (index: number) => {
    setEditingItem(prev => prev ? ({
      ...prev,
      ingredients: prev.ingredients.filter((_, i) => i !== index)
    }) : null)
  }

  // Inventory Integration Helper Functions
  const calculateMaxServings = (item: MenuItem) => {
    if (item.ingredients.length === 0) return Infinity
    
    let maxServings = Infinity
    
    for (const ingredient of item.ingredients) {
      const inventoryItem = inventoryItems.find(inv => inv.id === ingredient.inventoryItemId)
      if (inventoryItem) {
        const servingsFromThisIngredient = Math.floor(inventoryItem.currentStock / ingredient.quantity)
        maxServings = Math.min(maxServings, servingsFromThisIngredient)
      } else {
        // If ingredient not found in inventory, assume 0 servings possible
        maxServings = 0
      }
    }
    
    return maxServings === Infinity ? 0 : maxServings
  }

  const getStockStatus = (item: MenuItem) => {
    const maxServings = calculateMaxServings(item)
    
    if (maxServings === 0) return 'out_of_stock'
    if (maxServings <= 5) return 'low_stock'
    if (maxServings <= 10) return 'medium_stock'
    return 'in_stock'
  }

  const getStockStatusColor = (status: string) => {
    switch (status) {
      case 'out_of_stock': return 'bg-red-100 text-red-800'
      case 'low_stock': return 'bg-orange-100 text-orange-800'
      case 'medium_stock': return 'bg-yellow-100 text-yellow-800'
      case 'in_stock': return 'bg-green-100 text-green-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStockStatusText = (status: string, maxServings: number) => {
    switch (status) {
      case 'out_of_stock': return 'Out of Stock'
      case 'low_stock': return `Low Stock (${maxServings})`
      case 'medium_stock': return `Medium Stock (${maxServings})`
      case 'in_stock': return `In Stock (${maxServings > 50 ? '50+' : maxServings})`
      default: return 'Unknown'
    }
  }

  const getLowStockIngredients = (item: MenuItem) => {
    const lowStockIngredients = []
    
    for (const ingredient of item.ingredients) {
      const inventoryItem = inventoryItems.find(inv => inv.id === ingredient.inventoryItemId)
      if (inventoryItem) {
        const servingsFromThisIngredient = Math.floor(inventoryItem.currentStock / ingredient.quantity)
        if (servingsFromThisIngredient <= 5) {
          lowStockIngredients.push({
            name: ingredient.inventoryItemName,
            available: inventoryItem.currentStock,
            needed: ingredient.quantity,
            maxServings: servingsFromThisIngredient,
            unit: ingredient.unit
          })
        }
      }
    }
    
    return lowStockIngredients
  }

  const getFilteredItems = () => {
    let filtered = menuItems

    // Filter by search query
    if (searchQuery) {
      filtered = filtered.filter(item => 
        item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.category.toLowerCase().includes(searchQuery.toLowerCase())
      )
    }

    if (categoryFilter !== 'all') {
      filtered = filtered.filter(item => item.category === categoryFilter)
    }

    if (statusFilter !== 'all') {
      filtered = filtered.filter(item => item.status === statusFilter)
    }

    // Filter by stock availability
    if (stockFilter !== 'all') {
      filtered = filtered.filter(item => {
        const stockStatus = getStockStatus(item)
        switch (stockFilter) {
          case 'in_stock':
            return stockStatus === 'in_stock' || stockStatus === 'medium_stock'
          case 'low_stock':
            return stockStatus === 'low_stock'
          case 'out_of_stock':
            return stockStatus === 'out_of_stock'
          default:
            return true
        }
      })
    }

    // Apply sorting
    return filtered.sort((a, b) => {
      let valueA: any, valueB: any

      switch (sortBy) {
        case 'name':
          valueA = a.name.toLowerCase()
          valueB = b.name.toLowerCase()
          break
        case 'price':
          valueA = a.price
          valueB = b.price
          break
        case 'cost':
          valueA = a.cost
          valueB = b.cost
          break
        case 'margin':
          valueA = calculateProfitMargin(a.price, a.cost)
          valueB = calculateProfitMargin(b.price, b.cost)
          break
        case 'category':
          valueA = a.category.toLowerCase()
          valueB = b.category.toLowerCase()
          break
        case 'status':
          valueA = a.status
          valueB = b.status
          break
        default:
          valueA = a.name.toLowerCase()
          valueB = b.name.toLowerCase()
      }

      if (valueA < valueB) return sortOrder === 'asc' ? -1 : 1
      if (valueA > valueB) return sortOrder === 'asc' ? 1 : -1
      return 0
    })
  }

  const calculateProfitMargin = (price: number, cost: number) => {
    if (cost === 0) return 0
    return ((price - cost) / price) * 100
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800'
      case 'inactive': return 'bg-gray-100 text-gray-800'
      case 'out_of_stock': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const filteredItems = getFilteredItems()

  // Simple Add-ons Manager Component
  const SimpleAddonsManager = () => {
    const [showCreateAddon, setShowCreateAddon] = useState(false)
    const [editingAddon, setEditingAddon] = useState<Addon | null>(null)
    const [newAddon, setNewAddon] = useState({
      name: '',
      price: 0,
      description: '',
      ingredients: [] as Array<{
        inventoryItemId: string;
        inventoryItemName: string;
        quantity: number;
        unit: string;
        costPerUnit: number;
      }>
    })

    const calculateProfit = () => {
      if (newAddon.ingredients.length === 0 || newAddon.price <= 0) return { profit: 0, margin: 0 }
      
      const totalCost = newAddon.ingredients.reduce((sum, ingredient) => {
        return sum + (ingredient.costPerUnit * ingredient.quantity)
      }, 0)
      
      const profit = newAddon.price - totalCost
      const margin = (profit / newAddon.price) * 100
      return { profit, margin }
    }

    const addIngredient = () => {
      // Add a new empty ingredient
      setNewAddon(prev => ({
        ...prev,
        ingredients: [...prev.ingredients, {
          inventoryItemId: '',
          inventoryItemName: '',
          quantity: 1,
          unit: '',
          costPerUnit: 0
        }]
      }))
    }

    const removeIngredient = (index: number) => {
      setNewAddon(prev => ({
        ...prev,
        ingredients: prev.ingredients.filter((_, i) => i !== index)
      }))
    }

    const updateIngredient = (index: number, field: string, value: any) => {
      setNewAddon(prev => ({
        ...prev,
        ingredients: prev.ingredients.map((ingredient, i) => {
          if (i === index) {
            if (field === 'inventoryItem') {
              const item = value as InventoryItem
              return {
                ...ingredient,
                inventoryItemId: item.id,
                inventoryItemName: item.name,
                unit: item.unit,
                costPerUnit: item.costPerUnit || 0
              }
            } else {
              return { ...ingredient, [field]: value }
            }
          }
          return ingredient
        })
      }))
    }

    // Functions for editing addon ingredients
    const addIngredientToEdit = () => {
      if (!editingAddon) return
      setEditingAddon(prev => prev ? ({
        ...prev,
        ingredients: [...(prev.ingredients || []), {
          inventoryItemId: '',
          inventoryItemName: '',
          quantity: 1,
          unit: '',
          costPerUnit: 0
        }]
      }) : null)
    }

    const removeIngredientFromEdit = (index: number) => {
      if (!editingAddon) return
      setEditingAddon(prev => prev ? ({
        ...prev,
        ingredients: (prev.ingredients || []).filter((_, i) => i !== index)
      }) : null)
    }

    const updateIngredientInEdit = (index: number, field: string, value: any) => {
      if (!editingAddon) return
      setEditingAddon(prev => prev ? ({
        ...prev,
        ingredients: (prev.ingredients || []).map((ingredient, i) => {
          if (i === index) {
            if (field === 'inventoryItem') {
              const item = value as InventoryItem
              return {
                ...ingredient,
                inventoryItemId: item.id,
                inventoryItemName: item.name,
                unit: item.unit,
                costPerUnit: item.costPerUnit || 0
              }
            } else {
              return { ...ingredient, [field]: value }
            }
          }
          return ingredient
        })
      }) : null)
    }

    const handleCreateAddon = async () => {
      if (!newAddon.name || !newAddon.price || newAddon.ingredients.length === 0 || !profile?.tenantId || !selectedBranch) return
      
      // Validate all ingredients are properly configured
      const hasIncompleteIngredients = newAddon.ingredients.some(ing => 
        !ing.inventoryItemId || !ing.inventoryItemName || ing.quantity <= 0
      )
      if (hasIncompleteIngredients) {
        alert('Please complete all ingredient configurations.')
        return
      }
      
      try {
        const locationId = getBranchLocationId(selectedBranch.id)
        const totalCost = newAddon.ingredients.reduce((sum, ingredient) => {
          return sum + (ingredient.costPerUnit * ingredient.quantity)
        }, 0)
        
        // For backward compatibility, use the first ingredient's data for the main fields
        const primaryIngredient = newAddon.ingredients[0]
        
        const addonData: CreateAddon = {
          name: newAddon.name,
          description: newAddon.description,
          price: newAddon.price,
          inventoryItemId: primaryIngredient.inventoryItemId,
          inventoryItemName: primaryIngredient.inventoryItemName,
          inventoryQuantity: primaryIngredient.quantity,
          cost: totalCost,
          // Store all ingredients for future use
          ingredients: newAddon.ingredients
        }

        await createAddon(profile.tenantId, locationId, addonData)
        
        // Refresh add-ons list
        const updatedAddons = await getAddons(profile.tenantId, locationId)
        setAddons(updatedAddons)
        
        // Reset form
        setNewAddon({ name: '', price: 0, description: '', ingredients: [] })
        setShowCreateAddon(false)
        
        console.log('✅ Add-on created successfully with multiple ingredients')
      } catch (error) {
        console.error('❌ Error creating add-on:', error)
        alert('Failed to create add-on. Please try again.')
      }
    }

    const handleUpdateAddon = async () => {
      if (!editingAddon || !profile?.tenantId || !selectedBranch) return
      
      // Validate required fields
      if (!editingAddon.name || !editingAddon.price || (!editingAddon.ingredients || editingAddon.ingredients.length === 0)) {
        alert('Please complete all required fields.')
        return
      }
      
      try {
        const locationId = getBranchLocationId(selectedBranch.id)
        const totalCost = editingAddon.ingredients.reduce((sum, ingredient) => {
          return sum + (ingredient.costPerUnit * ingredient.quantity)
        }, 0)
        
        // For backward compatibility, use the first ingredient's data for the main fields
        const primaryIngredient = editingAddon.ingredients[0]
        
        const updateData = {
          name: editingAddon.name,
          description: editingAddon.description,
          price: editingAddon.price,
          inventoryItemId: primaryIngredient.inventoryItemId,
          inventoryItemName: primaryIngredient.inventoryItemName,
          inventoryQuantity: primaryIngredient.quantity,
          cost: totalCost,
          ingredients: editingAddon.ingredients
        }

        await updateAddon(profile.tenantId, editingAddon.id, updateData)
        
        // Refresh add-ons list
        const updatedAddons = await getAddons(profile.tenantId, locationId)
        setAddons(updatedAddons)
        
        // Reset editing state
        setEditingAddon(null)
        
        console.log('✅ Add-on updated successfully')
      } catch (error) {
        console.error('❌ Error updating add-on:', error)
        alert('Failed to update add-on. Please try again.')
      }
    }

    const handleDeleteAddon = async (addonId: string) => {
      if (!profile?.tenantId) return
      
      if (!confirm('Are you sure you want to delete this add-on?')) return
      
      try {
        await deleteAddon(profile.tenantId, addonId)
        
        // Update local state
        setAddons(prev => prev.filter(addon => addon.id !== addonId))
        
        console.log('✅ Add-on deleted successfully')
      } catch (error) {
        console.error('❌ Error deleting add-on:', error)
        alert('Failed to delete add-on. Please try again.')
      }
    }

    const handleToggleStatus = async (addon: Addon) => {
      if (!profile?.tenantId) return
      
      try {
        await toggleAddonStatus(profile.tenantId, addon.id, addon.status)
        
        // Update local state
        setAddons(prev => prev.map(a => 
          a.id === addon.id ? { ...a, status: a.status === 'active' ? 'inactive' : 'active' } : a
        ))
        
        console.log('✅ Add-on status updated')
      } catch (error) {
        console.error('❌ Error updating add-on status:', error)
        alert('Failed to update add-on status. Please try again.')
      }
    }

    return (
      <div className="space-y-6">
        {/* Add-ons Header */}
        <div className="flex justify-between items-center">
          <div>
            <h3 className="text-xl font-semibold text-gray-900">Add-ons Management</h3>
            <p className="text-gray-600">Create and manage add-ons linked to your inventory</p>
          </div>
          <button
            onClick={() => setShowCreateAddon(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            ➕ Create Add-on
          </button>
        </div>

        {/* Add-ons List */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {addons.length === 0 ? (
            <div className="col-span-full text-center py-12 bg-gray-50 rounded-lg">
              <div className="text-4xl mb-4">🥤</div>
              <h4 className="text-lg font-medium text-gray-900 mb-2">No add-ons yet</h4>
              <p className="text-gray-600 mb-4">Create your first add-on to get started</p>
              <button
                onClick={() => setShowCreateAddon(true)}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                Create Add-on
              </button>
            </div>
          ) : (
            addons.map((addon) => (
              <div key={addon.id} className="bg-white p-4 rounded-lg shadow border">
                <div className="flex justify-between items-start mb-2">
                  <h5 className="font-semibold text-gray-900">{addon.name}</h5>
                  <div className="flex items-center gap-2">
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                      addon.status === 'active' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {addon.status}
                    </span>
                    <span className="text-lg font-bold text-green-600">₱{addon.price.toFixed(2)}</span>
                  </div>
                </div>
                <p className="text-sm text-gray-600 mb-2">{addon.description}</p>
                <div className="text-xs text-gray-500 space-y-1 mb-3">
                  {/* Show multiple ingredients if available, otherwise show single item */}
                  {addon.ingredients && addon.ingredients.length > 1 ? (
                    <div>
                      <div className="font-medium">📦 Ingredients ({addon.ingredients.length}):</div>
                      {addon.ingredients.map((ingredient, index) => (
                        <div key={index} className="ml-2">
                          • {ingredient.inventoryItemName} ({ingredient.quantity} {ingredient.unit})
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div>📦 {addon.inventoryItemName} ({addon.inventoryQuantity} units)</div>
                  )}
                  <div>💰 Profit: ₱{(addon.price - addon.cost).toFixed(2)} ({(((addon.price - addon.cost) / addon.price) * 100).toFixed(1)}%)</div>
                </div>
                
                {/* Action Buttons */}
                <div className="flex gap-2 mt-3">
                  <button
                    onClick={() => handleToggleStatus(addon)}
                    className={`flex-1 px-3 py-2 text-sm rounded-lg transition-colors ${
                      addon.status === 'active'
                        ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
                        : 'bg-green-100 text-green-800 hover:bg-green-200'
                    }`}
                  >
                    {addon.status === 'active' ? 'Deactivate' : 'Activate'}
                  </button>
                  <button
                    onClick={() => setEditingAddon(addon)}
                    className="flex-1 px-3 py-2 text-sm bg-blue-100 text-blue-800 rounded-lg hover:bg-blue-200 transition-colors"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => handleDeleteAddon(addon.id)}
                    className="flex-1 px-3 py-2 text-sm bg-red-100 text-red-800 rounded-lg hover:bg-red-200 transition-colors"
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Create Add-on Modal */}
        {showCreateAddon && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md">
              <div className="bg-blue-600 px-6 py-4 text-white rounded-t-xl">
                <h4 className="text-lg font-bold">Create New Add-on</h4>
                <p className="text-blue-100 text-sm">Simple 3-step process</p>
              </div>
              
              <div className="p-6 space-y-4">
                {/* Step 1: Basic Info */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Add-on Name</label>
                  <input
                    type="text"
                    value={newAddon.name}
                    onChange={(e) => setNewAddon(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="e.g., Extra Cheese, Large Size"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <input
                    type="text"
                    value={newAddon.description}
                    onChange={(e) => setNewAddon(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Brief description"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                {/* Step 2: Ingredients Selection */}
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <label className="block text-sm font-medium text-gray-700">Ingredients Required</label>
                    <button
                      type="button"
                      onClick={addIngredient}
                      className="text-sm bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200"
                    >
                      + Add Ingredient
                    </button>
                  </div>
                  
                  {inventoryItems.length === 0 && (
                    <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <div className="flex items-start gap-2">
                        <svg className="w-5 h-5 text-blue-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <div>
                          <p className="text-sm font-medium text-blue-900">No Inventory Items Found</p>
                          <p className="text-sm text-blue-700 mt-1">
                            You need to add inventory items first before creating add-ons. 
                            Go to <strong>Inventory Center</strong> and add some items.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {newAddon.ingredients.length === 0 ? (
                    <div className="text-center py-8 border-2 border-dashed border-gray-200 rounded-lg">
                      <div className="text-gray-400">
                        <div className="text-2xl mb-2">🥤</div>
                        <p>No ingredients added yet</p>
                        <p className="text-sm">Click "Add Ingredient" to start</p>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {newAddon.ingredients.map((ingredient, index) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-3">
                          <div className="flex justify-between items-start mb-2">
                            <h5 className="text-sm font-medium">Ingredient {index + 1}</h5>
                            <button
                              type="button"
                              onClick={() => removeIngredient(index)}
                              className="text-red-600 hover:text-red-800 text-sm"
                            >
                              Remove
                            </button>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-2">
                            <div>
                              <label className="block text-xs text-gray-600 mb-1">Inventory Item</label>
                              <select
                                value={ingredient.inventoryItemId}
                                onChange={(e) => {
                                  const item = inventoryItems.find(inv => inv.id === e.target.value)
                                  if (item) {
                                    updateIngredient(index, 'inventoryItem', item)
                                  }
                                }}
                                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                              >
                                <option value="">Select item...</option>
                                {inventoryItems.map((item) => (
                                  <option key={item.id} value={item.id}>
                                    {item.name} (₱{item.costPerUnit?.toFixed(2) || '0.00'})
                                  </option>
                                ))}
                              </select>
                            </div>
                            
                            <div>
                              <label className="block text-xs text-gray-600 mb-1">
                                Quantity {ingredient.unit && `(${ingredient.unit})`}
                              </label>
                              <input
                                type="number"
                                value={ingredient.quantity}
                                onChange={(e) => updateIngredient(index, 'quantity', parseFloat(e.target.value) || 0)}
                                min="0.01"
                                step="0.01"
                                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-blue-500"
                              />
                            </div>
                          </div>
                          
                          {ingredient.inventoryItemName && (
                            <div className="mt-2 text-xs text-gray-500">
                              Cost: ₱{(ingredient.costPerUnit * ingredient.quantity).toFixed(2)}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Step 3: Pricing */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Your Selling Price</label>
                  <div className="flex items-center gap-2">
                    <span className="text-gray-500">₱</span>
                    <input
                      type="number"
                      value={newAddon.price}
                      onChange={(e) => setNewAddon(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}
                      min="0.01"
                      step="0.01"
                      placeholder="0.00"
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>

                {/* Profit Display */}
                {newAddon.ingredients.length > 0 && newAddon.price > 0 && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                    <div className="text-center">
                      <div className="text-sm text-gray-600">Profit Analysis</div>
                      <div className="text-lg font-bold text-green-600">
                        ₱{calculateProfit().profit.toFixed(2)} ({calculateProfit().margin.toFixed(1)}%)
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        Total Cost: ₱{newAddon.ingredients.reduce((sum, ing) => sum + (ing.costPerUnit * ing.quantity), 0).toFixed(2)}
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="flex gap-3 px-6 pb-6">
                <button
                  onClick={() => {
                    setShowCreateAddon(false)
                    setNewAddon({ name: '', price: 0, description: '', ingredients: [] })
                  }}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleCreateAddon}
                  disabled={!newAddon.name || !newAddon.price || newAddon.ingredients.length === 0}
                  className={`flex-1 px-4 py-2 rounded-lg font-medium ${
                    newAddon.name && newAddon.price && newAddon.ingredients.length > 0
                      ? 'bg-blue-600 text-white hover:bg-blue-700'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  Create Add-on
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Edit Add-on Modal */}
        {editingAddon && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-md max-h-[90vh] overflow-y-auto">
              <div className="bg-green-600 px-6 py-4 text-white rounded-t-xl">
                <h4 className="text-lg font-bold">Edit Add-on</h4>
                <p className="text-green-100 text-sm">Update your add-on details</p>
              </div>
              
              <div className="p-6 space-y-4">
                {/* Step 1: Basic Info */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Add-on Name</label>
                  <input
                    type="text"
                    value={editingAddon.name}
                    onChange={(e) => setEditingAddon(prev => prev ? ({ ...prev, name: e.target.value }) : null)}
                    placeholder="e.g., Extra Cheese, Large Size"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                  <input
                    type="text"
                    value={editingAddon.description}
                    onChange={(e) => setEditingAddon(prev => prev ? ({ ...prev, description: e.target.value }) : null)}
                    placeholder="Brief description"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                  />
                </div>

                {/* Step 2: Ingredients Selection */}
                <div>
                  <div className="flex justify-between items-center mb-2">
                    <label className="block text-sm font-medium text-gray-700">Ingredients Required</label>
                    <button
                      type="button"
                      onClick={addIngredientToEdit}
                      className="text-sm bg-green-100 text-green-700 px-2 py-1 rounded hover:bg-green-200"
                    >
                      + Add Ingredient
                    </button>
                  </div>
                  
                  {(!editingAddon.ingredients || editingAddon.ingredients.length === 0) ? (
                    <div className="text-center py-8 border-2 border-dashed border-gray-200 rounded-lg">
                      <div className="text-gray-400">
                        <div className="text-2xl mb-2">🥤</div>
                        <p>No ingredients added yet</p>
                        <p className="text-sm">Click "Add Ingredient" to start</p>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {editingAddon.ingredients.map((ingredient, index) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-3">
                          <div className="flex justify-between items-start mb-2">
                            <h5 className="text-sm font-medium">Ingredient {index + 1}</h5>
                            <button
                              type="button"
                              onClick={() => removeIngredientFromEdit(index)}
                              className="text-red-600 hover:text-red-800 text-sm"
                            >
                              Remove
                            </button>
                          </div>
                          
                          <div className="grid grid-cols-2 gap-2">
                            <div>
                              <label className="block text-xs text-gray-600 mb-1">Inventory Item</label>
                              <select
                                value={ingredient.inventoryItemId}
                                onChange={(e) => {
                                  const item = inventoryItems.find(inv => inv.id === e.target.value)
                                  if (item) {
                                    updateIngredientInEdit(index, 'inventoryItem', item)
                                  }
                                }}
                                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-green-500"
                              >
                                <option value="">Select item...</option>
                                {inventoryItems.map((item) => (
                                  <option key={item.id} value={item.id}>
                                    {item.name} (₱{item.costPerUnit?.toFixed(2) || '0.00'})
                                  </option>
                                ))}
                              </select>
                            </div>
                            
                            <div>
                              <label className="block text-xs text-gray-600 mb-1">
                                Quantity {ingredient.unit && `(${ingredient.unit})`}
                              </label>
                              <input
                                type="number"
                                value={ingredient.quantity}
                                onChange={(e) => updateIngredientInEdit(index, 'quantity', parseFloat(e.target.value) || 0)}
                                min="0.01"
                                step="0.01"
                                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-green-500"
                              />
                            </div>
                          </div>
                          
                          {ingredient.inventoryItemName && (
                            <div className="mt-2 text-xs text-gray-500">
                              Cost: ₱{(ingredient.costPerUnit * ingredient.quantity).toFixed(2)}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Step 3: Pricing */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Your Selling Price</label>
                  <div className="flex items-center gap-2">
                    <span className="text-gray-500">₱</span>
                    <input
                      type="number"
                      value={editingAddon.price}
                      onChange={(e) => setEditingAddon(prev => prev ? ({ ...prev, price: parseFloat(e.target.value) || 0 }) : null)}
                      min="0.01"
                      step="0.01"
                      placeholder="0.00"
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
                    />
                  </div>
                </div>

                {/* Profit Display */}
                {editingAddon.ingredients && editingAddon.ingredients.length > 0 && editingAddon.price > 0 && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                    <div className="text-center">
                      <div className="text-sm text-gray-600">Profit Analysis</div>
                      <div className="text-lg font-bold text-green-600">
                        ₱{(() => {
                          const totalCost = editingAddon.ingredients?.reduce((sum, ing) => sum + (ing.costPerUnit * ing.quantity), 0) || 0
                          const profit = editingAddon.price - totalCost
                          return profit.toFixed(2)
                        })()} ({(() => {
                          const totalCost = editingAddon.ingredients?.reduce((sum, ing) => sum + (ing.costPerUnit * ing.quantity), 0) || 0
                          const profit = editingAddon.price - totalCost
                          const margin = editingAddon.price > 0 ? (profit / editingAddon.price) * 100 : 0
                          return margin.toFixed(1)
                        })()}%)
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        Total Cost: ₱{(editingAddon.ingredients?.reduce((sum, ing) => sum + (ing.costPerUnit * ing.quantity), 0) || 0).toFixed(2)}
                      </div>
                    </div>
                  </div>
                )}
              </div>

              <div className="flex gap-3 px-6 pb-6">
                <button
                  onClick={() => setEditingAddon(null)}
                  className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleUpdateAddon}
                  disabled={!editingAddon.name || !editingAddon.price || !editingAddon.ingredients || editingAddon.ingredients.length === 0}
                  className={`flex-1 px-4 py-2 rounded-lg font-medium ${
                    editingAddon.name && editingAddon.price && editingAddon.ingredients && editingAddon.ingredients.length > 0
                      ? 'bg-green-600 text-white hover:bg-green-700'
                      : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  }`}
                >
                  Update Add-on
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="h-full flex flex-col">
      {/* Compact Header */}
      <div className="flex items-center justify-between p-4 bg-white border-b border-gray-200">
        <div className="flex items-center gap-6">
          <h1 className="text-xl font-semibold text-gray-900">Menu Builder</h1>
          
          {/* Compact Tab Navigation */}
          <div className="flex bg-gray-50 rounded-lg p-0.5">
            <button
              onClick={() => setActiveTab('menu-items')}
              className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'menu-items'
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Menu Items
            </button>
            <button
              onClick={() => setActiveTab('addons')}
              className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                activeTab === 'addons'
                  ? 'bg-white text-blue-600 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Add-ons
            </button>
          </div>
        </div>

        {/* Action Controls */}
        <div className="flex items-center gap-2">
          {bulkMode && selectedItems.size > 0 && (
            <div className="flex items-center gap-2 mr-4">
              <span className="text-sm text-gray-600">{selectedItems.size} selected</span>
              <button
                onClick={() => handleBulkStatusChange('active')}
                className="px-2 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700"
              >
                Activate
              </button>
              <button
                onClick={() => handleBulkStatusChange('inactive')}
                className="px-2 py-1 text-xs bg-yellow-600 text-white rounded hover:bg-yellow-700"
              >
                Deactivate
              </button>
              <button
                onClick={handleBulkDelete}
                className="px-2 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700"
              >
                Delete
              </button>
              <button
                onClick={() => setBulkMode(false)}
                className="px-2 py-1 text-xs text-gray-600 hover:bg-gray-100 rounded"
              >
                Cancel
              </button>
            </div>
          )}
          
          {!bulkMode && (
            <>
              <button
                onClick={() => setBulkMode(true)}
                className="px-3 py-1.5 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Select Multiple
              </button>
              <button
                onClick={() => setShowCreateModal(true)}
                className="bg-blue-600 text-white px-3 py-1.5 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
              >
                {activeTab === 'menu-items' ? 'Add Item' : 'Add Add-on'}
              </button>
            </>
          )}
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 overflow-hidden">
        {activeTab === 'menu-items' ? (
          <div className="h-full flex flex-col">
            {/* Compact Stats Bar */}
            <div className="flex items-center justify-between px-4 py-3 bg-gray-50 border-b border-gray-200">
              <div className="flex items-center gap-6 text-sm">
                <div className="flex items-center gap-2">
                  <span className="text-gray-500">Total:</span>
                  <span className="font-semibold text-gray-900">{menuItems.length}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-gray-500">Active:</span>
                  <span className="font-semibold text-green-600">{menuItems.filter(item => item.status === 'active').length}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-gray-500">Low Stock:</span>
                  <span className="font-semibold text-orange-600">{menuItems.filter(item => getStockStatus(item) === 'low_stock').length}</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-gray-500">Avg Price:</span>
                  <span className="font-semibold text-blue-600">₱{menuItems.length > 0 ? (menuItems.reduce((sum, item) => sum + item.price, 0) / menuItems.length).toFixed(2) : '0.00'}</span>
                </div>
              </div>
            </div>

            {/* Compact Filters */}
            <div className="px-4 py-3 bg-white border-b border-gray-200">
              <div className="flex items-center gap-3">
                <input
                  type="text"
                  placeholder="Search items..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="flex-1 px-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <select
                  value={categoryFilter}
                  onChange={(e) => setCategoryFilter(e.target.value)}
                  className="px-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Categories</option>
                  {Array.from(new Set(menuItems.map(item => item.category)))
                    .filter(category => category.trim() !== '')
                    .sort()
                    .map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  className="px-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Status</option>
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                </select>
                <select
                  value={stockFilter}
                  onChange={(e) => setStockFilter(e.target.value)}
                  className="px-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Stock</option>
                  <option value="in_stock">In Stock</option>
                  <option value="low_stock">Low Stock</option>
                  <option value="out_of_stock">Out of Stock</option>
                </select>
              </div>
            </div>

            {/* Menu Items Grid */}
            <div className="flex-1 overflow-auto p-4">
              {filteredItems.length === 0 ? (
                <div className="flex items-center justify-center h-64">
                  <div className="text-center">
                    <div className="text-gray-400 text-lg mb-2">No items found</div>
                    <div className="text-gray-500 text-sm">
                      {menuItems.length === 0 
                        ? "Create your first menu item to get started" 
                        : "Try adjusting your filters"}
                    </div>
                  </div>
                </div>
              ) : (
                <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4">
                  {filteredItems.map((item) => (
                    <div key={item.id} className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                      {bulkMode && (
                        <div className="mb-3">
                          <input
                            type="checkbox"
                            checked={selectedItems.has(item.id!)}
                            onChange={() => handleSelectItem(item.id!)}
                            className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                          />
                        </div>
                      )}
                      
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            {item.emoji && <span className="text-lg">{item.emoji}</span>}
                            <h3 className="font-semibold text-gray-900 truncate">{item.name}</h3>
                          </div>
                          <p className="text-sm text-gray-600 mb-2 line-clamp-2">{item.description}</p>
                          <div className="flex items-center gap-2 text-xs text-gray-500">
                            <span>{item.category}</span>
                            <span>•</span>
                            <span className="text-green-600">Synced to POS</span>
                          </div>
                        </div>
                        <div className="flex flex-col items-end gap-2 ml-4">
                          <span className="text-lg font-bold text-gray-900">₱{item.price.toFixed(2)}</span>
                          <button
                            onClick={() => toggleStatus(item)}
                            className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(item.status)}`}
                          >
                            {item.status}
                          </button>
                        </div>
                      </div>

                      {/* Compact Info Grid */}
                      <div className="grid grid-cols-2 gap-2 text-xs mb-3">
                        <div className="flex justify-between">
                          <span className="text-gray-500">Cost:</span>
                          <span className="font-medium">₱{item.cost.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">Profit:</span>
                          <span className="font-medium text-green-600">₱{(item.price - item.cost).toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">Margin:</span>
                          <span className="font-medium">{calculateProfitMargin(item.price, item.cost).toFixed(1)}%</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-500">Stock:</span>
                          <span className={`font-medium px-1.5 py-0.5 rounded text-xs ${getStockStatusColor(getStockStatus(item))}`}>
                            {getStockStatusText(getStockStatus(item), calculateMaxServings(item))}
                          </span>
                        </div>
                      </div>

                      {!bulkMode && (
                        <div className="flex gap-2 pt-2 border-t border-gray-100">
                          <button
                            onClick={() => setEditingItem(item)}
                            className="flex-1 px-3 py-1.5 text-sm bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDeleteMenuItem(item.id!)}
                            className="flex-1 px-3 py-1.5 text-sm bg-red-50 text-red-700 rounded-lg hover:bg-red-100 transition-colors"
                          >
                            Delete
                          </button>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        ) : (
          <SimpleAddonsManager />
        )}
      </div>
        {(() => {
          console.log('🎨 RENDERING MENU ITEMS:', {
            totalMenuItems: menuItems.length,
            filteredCount: filteredItems.length,
            items: filteredItems.map(item => ({
              id: item.id,
              name: item.name,
              category: item.category
            }))
          })
          return null
        })()}
        
        {filteredItems.length === 0 ? (
          <div className="col-span-full text-center py-12">
            <div className="text-gray-500 text-lg">No menu items found</div>
            <div className="text-gray-400 text-sm mt-2">
              {menuItems.length === 0 
                ? "Start by creating your first menu item" 
                : "Try adjusting your filters"}
            </div>
          </div>
        ) : (
          filteredItems.map((item) => (
          <div key={item.id} className="bg-white rounded-lg shadow p-6 relative">
            {bulkMode && (
              <div className="absolute top-4 left-4">
                <input
                  type="checkbox"
                  checked={selectedItems.has(item.id!)}
                  onChange={() => handleSelectItem(item.id!)}
                  className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                />
              </div>
            )}
            <div className={`flex justify-between items-start mb-4 ${bulkMode ? 'ml-6' : ''}`}>
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-1">
                  {item.emoji && (
                    <span className="text-2xl">{item.emoji}</span>
                  )}
                  <h3 className="text-lg font-semibold text-gray-900">{item.name}</h3>
                </div>
                <div className="flex items-center gap-2 mt-1">
                  <span className="text-xs text-gray-500">{item.category}</span>
                  <div className="flex items-center gap-1 text-xs text-green-600">
                    <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                    </svg>
                    Synced to POS
                  </div>
                </div>
              </div>
              <button
                onClick={() => toggleStatus(item)}
                className={`px-3 py-1 text-xs font-medium rounded-full ${getStatusColor(item.status)}`}
              >
                {item.status}
              </button>
            </div>
            
            <p className="text-sm text-gray-600 mb-3">{item.description}</p>
            
            <div className="space-y-2 mb-4">
              <div className="flex justify-between">
                <span className="text-sm text-gray-500">Category:</span>
                <span className="text-sm font-medium">{item.category}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-500">Price:</span>
                <span className="text-sm font-medium">₱{item.price.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-500">Cost:</span>
                <span className="text-sm font-medium">₱{item.cost.toFixed(2)}</span>
              </div>
              {(item.price > 0 && item.cost > 0) && (
                <>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-500">Profit:</span>
                    <span className="text-sm font-medium text-green-600">
                      ₱{(item.price - item.cost).toFixed(2)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-500">Margin:</span>
                    <span className="text-sm font-medium text-green-600">
                      {calculateProfitMargin(item.price, item.cost).toFixed(1)}%
                    </span>
                  </div>
                </>
              )}
              {item.preparationTime > 0 && (
                <div className="flex justify-between">
                  <span className="text-sm text-gray-500">Prep Time:</span>
                  <span className="text-sm font-medium">{item.preparationTime} min</span>
                </div>
              )}
              {item.calories && item.calories > 0 && (
                <div className="flex justify-between">
                  <span className="text-sm text-gray-500">Calories:</span>
                  <span className="text-sm font-medium">{item.calories}</span>
                </div>
              )}
            </div>

            {item.allergens && item.allergens.length > 0 && (
              <div className="mb-4">
                <span className="text-sm text-gray-500">Allergens:</span>
                <div className="flex flex-wrap gap-1 mt-1">
                  {item.allergens.map((allergen) => (
                    <span
                      key={allergen}
                      className="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full"
                    >
                      {allergen}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Stock Info */}
            <div className="mb-4">
              <span className="text-sm text-gray-500">Stock Status:</span>
              <div className="flex items-center gap-2 mt-1">
                <span className={`text-xs font-medium rounded-full px-3 py-1 ${getStockStatusColor(getStockStatus(item))}`}>
                  {getStockStatusText(getStockStatus(item), calculateMaxServings(item))}
                </span>
                {getStockStatus(item) === 'low_stock' && (
                  <svg className="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.464 0L4.35 16.5c-.77.833.192 2.5 1.732 2.5z" />
                  </svg>
                )}
                {getStockStatus(item) === 'out_of_stock' && (
                  <svg className="w-4 h-4 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                )}
              </div>
            </div>

            {/* Low Stock Ingredients Warning */}
            {(() => {
              const lowStockIngredients = getLowStockIngredients(item)
              return lowStockIngredients.length > 0 ? (
                <div className="mb-4 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                  <p className="text-sm font-medium text-orange-800 mb-2">⚠️ Low Stock Ingredients:</p>
                  <ul className="text-xs text-orange-700 space-y-1">
                    {lowStockIngredients.map((ingredient, index) => (
                      <li key={index} className="flex justify-between">
                        <span>{ingredient.name}</span>
                        <span>{ingredient.available} {ingredient.unit} (need {ingredient.needed})</span>
                      </li>
                    ))}
                  </ul>
                </div>
              ) : null
            })()}

            {!bulkMode && (
              <div className="flex space-x-2">
                <button
                  onClick={() => setEditingItem(item)}
                  className="flex-1 px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDeleteMenuItem(item.id!)}
                  className="flex-1 px-3 py-2 text-sm bg-red-600 text-white rounded-lg hover:bg-red-700"
                >
                  Delete
                </button>
              </div>
            )}
          </div>
          ))
        )}
      </div>
        </>
      ) : (
        /* Add-ons Section */
        <SimpleAddonsManager />
      )}

      {/* Advanced Create Menu Item Modal - Only for Menu Items Tab */}
      {activeTab === 'menu-items' && (
        <CreateMenuItemModal
          isOpen={showCreateModal}
          onClose={() => setShowCreateModal(false)}
        onSubmit={async (menuItemData) => {
          if (!profile?.tenantId || !selectedBranch) {
            alert('Error: Missing tenant or branch information. Please refresh and try again.');
            return;
          }
          try {
            const locationId = getBranchLocationId(selectedBranch.id);
            // Validate required fields
            if (!menuItemData.name || !menuItemData.category || !menuItemData.price) {
              throw new Error('Missing required fields: name, category, or price');
            }
            // Transform ingredients to match Firebase MenuIngredient format
            const transformedIngredients = menuItemData.ingredients.map(ingredient => {
              const inventoryItem = inventoryItems.find(item => item.id === ingredient.id);
              return {
                inventoryItemId: ingredient.id,
                inventoryItemName: inventoryItem?.name || '',
                quantity: ingredient.quantity,
                unit: inventoryItem?.unit || '',
                cost: inventoryItem?.costPerUnit || 0
              };
            });
            const itemData = {
              name: menuItemData.name,
              description: menuItemData.description,
              category: menuItemData.category,
              price: menuItemData.price,
              cost: menuItemData.cost || 0,
              profitMargin: menuItemData.profitMargin || 0,
              profitAmount: menuItemData.profitAmount || 0,
              ingredients: transformedIngredients,
              preparationTime: menuItemData.preparationTime,
              calories: menuItemData.nutritionalInfo.calories,
              allergens: menuItemData.allergens,
              emoji: menuItemData.emoji,
              tenantId: profile.tenantId,
              locationId
            };
            const newMenuItemId = await addMenuItem(itemData);
            if (!newMenuItemId) {
              throw new Error('Failed to create menu item: No ID returned');
            }
            const updatedItems = await getMenuItems(profile.tenantId, locationId);
            const createdItem = updatedItems.find(item => item.id === newMenuItemId);
            if (createdItem) {
              try {
                await syncMenuItemToPOS(createdItem);
              } catch (syncError) {
                // Silent POS sync error
              }
            } else {
              throw new Error('Menu item was created but could not be found');
            }
            setMenuItems(updatedItems);
            alert(`✅ Menu item "${menuItemData.name}" created successfully!`);
          } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
            alert(`❌ Error creating menu item: ${errorMessage}`);
          }
        }}
        categories={(() => {
          const existingCategories = Array.from(new Set(menuItems.map(item => item.category))).filter(category => category.trim() !== '')
          const defaultCategories = ['Appetizers', 'Main Course', 'Desserts', 'Beverages', 'Sides', 'Salads', 'Soups', 'Pasta', 'Pizza', 'Burgers']
          const allCategories = [...existingCategories, ...defaultCategories.filter(cat => !existingCategories.includes(cat))]
          return allCategories
        })()}
        inventory={inventoryItems.map(item => ({
          id: item.id,
          name: item.name,
          description: '', // firebase inventory doesn't have description
          sku: item.id, // use id as sku fallback
          category: item.category,
          quantity: item.currentStock,
          unit: item.unit,
          cost: item.costPerUnit || 0,
          price: (item.costPerUnit || 0) * 1.3, // estimated price with markup
          minStock: item.minStock,
          maxStock: item.maxStock || 0,
          supplier: item.supplier || '',
          location: item.locationId,
          status: item.status === 'good' ? 'active' as const : 'inactive' as const,
          lastUpdated: item.lastUpdated.toDate(),
          expiryDate: item.expirationDate?.toDate()
        }))}
      />
      )}

      {/* Edit Item Modal */}
      {editingItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Edit Menu Item</h3>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Basic Information */}
              <div className="space-y-4">
                <h4 className="font-medium text-gray-900 border-b pb-2">Basic Information</h4>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Name
                  </label>
                  <input
                    type="text"
                    value={editingItem.name}
                    onChange={(e) => setEditingItem(prev => prev ? { ...prev, name: e.target.value } : null)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Emoji
                  </label>
                  <input
                    type="text"
                    value={editingItem.emoji || ''}
                    onChange={(e) => setEditingItem(prev => prev ? { ...prev, emoji: e.target.value } : null)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-center text-2xl"
                    placeholder="🍕"
                    maxLength={2}
                  />
                  <p className="text-xs text-gray-500 mt-1">Add an emoji to represent this item</p>
                  <div className="flex flex-wrap gap-1 mt-2">
                    {['🍕', '🍔', '🍟', '🥤', '☕', '🍰', '🥗', '🍜', '🍗', '🌮'].map(emoji => (
                      <button
                        key={emoji}
                        type="button"
                        onClick={() => setEditingItem(prev => prev ? { ...prev, emoji } : null)}
                        className="text-lg p-1 hover:bg-gray-100 rounded border border-gray-200 hover:border-blue-300 transition-colors"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Description
                  </label>
                  <textarea
                    value={editingItem.description}
                    onChange={(e) => setEditingItem(prev => prev ? { ...prev, description: e.target.value } : null)}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Price
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={editingItem.price}
                      onChange={(e) => setEditingItem(prev => prev ? { ...prev, price: parseFloat(e.target.value) || 0 } : null)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Status
                    </label>
                    <select
                      value={editingItem.status}
                      onChange={(e) => setEditingItem(prev => prev ? { ...prev, status: e.target.value as any } : null)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="active">Active</option>
                      <option value="inactive">Inactive</option>
                      <option value="out_of_stock">Out of Stock</option>
                    </select>
                  </div>
                </div>

                {/* Cost Summary */}
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h5 className="text-sm font-medium text-gray-900 mb-2">Cost Summary</h5>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600">Ingredient Cost:</span>
                      <span className="font-medium">₱{editingItem.ingredients.reduce((sum, ing) => sum + ing.cost, 0).toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600">Selling Price:</span>
                      <span className="font-medium">₱{editingItem.price.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between border-t pt-2">
                      <span className="text-gray-600">Profit Margin:</span>
                      <span className="font-medium text-green-600">
                        {editingItem.price > 0 && editingItem.ingredients.length > 0 ? 
                          `₱${(editingItem.price - editingItem.ingredients.reduce((sum, ing) => sum + ing.cost, 0)).toFixed(2)} (${(((editingItem.price - editingItem.ingredients.reduce((sum, ing) => sum + ing.cost, 0)) / editingItem.price) * 100).toFixed(1)}%)`
                          : 'N/A'
                        }
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Ingredients Section */}
              <div className="space-y-4">
                <div className="flex items-center justify-between border-b pb-2">
                  <div>
                    <h4 className="font-medium text-gray-900">Recipe Ingredients</h4>
                    <p className="text-sm text-gray-600">Manage ingredients to calculate product cost</p>
                  </div>
                  <button
                    onClick={addIngredientToEdit}
                    className="px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    Add Ingredient
                  </button>
                </div>

                {editingItem.ingredients.length > 0 ? (
                  <div className="space-y-3 max-h-80 overflow-y-auto">
                    {editingItem.ingredients.map((ingredient, index) => (
                      <div key={index} className="flex items-center gap-2 p-3 bg-gray-50 rounded-lg">
                        <div className="flex-1 min-w-0">
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Inventory Item
                          </label>
                          <select
                            value={ingredient.inventoryItemId}
                            onChange={(e) => updateIngredientInEdit(index, 'inventoryItemId', e.target.value)}
                            className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                          >
                            <option value="">Select ingredient</option>
                            {inventoryItems.map((item) => (
                              <option key={item.id} value={item.id}>
                                {item.name} ({item.unit})
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="w-16">
                          <label className="block text-xs font-medium text-gray-700 mb-1">
                            Cost
                          </label>
                          <input
                            type="text"
                            value={`₱${ingredient.cost.toFixed(2)}`}
                            readOnly
                            className="w-full px-2 py-1 text-xs border border-gray-300 rounded bg-gray-100 text-gray-600"
                          />
                        </div>
                        <button
                          onClick={() => removeIngredientFromEdit(index)}
                          className="p-1 text-red-600 hover:bg-red-50 rounded mt-5"
                          title="Remove ingredient"
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <svg className="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                    <p className="text-sm">No ingredients added yet</p>
                    <p className="text-xs text-gray-400">Click &quot;Add Ingredient&quot; to start building your recipe</p>
                  </div>
                )}
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6 pt-4 border-t">
              <button
                onClick={() => setEditingItem(null)}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={handleUpdateMenuItem}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                Update Item
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
