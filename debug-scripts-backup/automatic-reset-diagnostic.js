/**
 * üîÑ AUTOMATIC RESET SYSTEM DIAGNOSTIC & TEST
 * 
 * This script provides comprehensive testing and diagnostics for the
 * improved automatic reset system in CoreTrack.
 * 
 * Usage: Run in browser console or copy to browser console
 */

console.log('üîÑ AUTOMATIC RESET SYSTEM DIAGNOSTIC')
console.log('=' .repeat(60))

// Global test state
window.resetSystemDiagnostic = {
  results: {},
  logs: [],
  startTime: new Date()
}

/**
 * Test 1: Check if HybridResetManager is working
 */
async function testResetManagerAvailability() {
  console.log('\nüß™ TEST 1: Reset Manager Availability')
  console.log('-' .repeat(40))
  
  try {
    // Check localStorage for reset schedule
    const resetSchedule = localStorage.getItem('resetSchedule')
    if (resetSchedule) {
      const schedule = JSON.parse(resetSchedule)
      console.log('‚úÖ Reset schedule found:')
      console.log('   üìÖ Enabled:', schedule.enabled)
      console.log('   üïí Time:', schedule.time)
      console.log('   üåè Timezone:', schedule.timezone)
      
      window.resetSystemDiagnostic.results.schedule = schedule
    } else {
      console.log('‚ö†Ô∏è No reset schedule found in localStorage')
      console.log('   This might mean:')
      console.log('   ‚Ä¢ Team Management page not visited yet')
      console.log('   ‚Ä¢ Component not rendering properly')
      console.log('   ‚Ä¢ LocalStorage was cleared')
    }
    
    return true
  } catch (error) {
    console.error('‚ùå Error checking reset manager:', error)
    return false
  }
}

/**
 * Test 2: Check last reset timestamp
 */
function testLastResetTimestamp() {
  console.log('\nüß™ TEST 2: Last Reset Timestamp')
  console.log('-' .repeat(40))
  
  try {
    const lastReset = localStorage.getItem('lastDailyReset')
    
    if (lastReset) {
      const resetDate = new Date(lastReset)
      const now = new Date()
      const hoursSince = Math.floor((now.getTime() - resetDate.getTime()) / (1000 * 60 * 60))
      
      console.log('‚úÖ Last reset found:')
      console.log('   üìÖ Date:', resetDate.toLocaleString())
      console.log('   ‚è∞ Hours ago:', hoursSince)
      
      if (hoursSince > 25) {
        console.log('üö® OVERDUE: Reset should have happened!')
        console.log('   Possible issues:')
        console.log('   ‚Ä¢ Browser/tab was closed during reset time')
        console.log('   ‚Ä¢ Active shift blocking reset')
        console.log('   ‚Ä¢ Reset system disabled')
      } else if (hoursSince < 1) {
        console.log('‚úÖ Recent reset - system working properly')
      } else {
        console.log('üëç Normal - within expected timeframe')
      }
      
      window.resetSystemDiagnostic.results.lastReset = { 
        timestamp: lastReset, 
        hoursAgo: hoursSince 
      }
    } else {
      console.log('‚ÑπÔ∏è No previous reset timestamp found')
      console.log('   This is normal for new installations')
    }
    
    return true
  } catch (error) {
    console.error('‚ùå Error checking reset timestamp:', error)
    return false
  }
}

/**
 * Test 3: Check service worker registration
 */
async function testServiceWorker() {
  console.log('\nüß™ TEST 3: Service Worker for Background Reset')
  console.log('-' .repeat(40))
  
  try {
    if ('serviceWorker' in navigator) {
      const registrations = await navigator.serviceWorker.getRegistrations()
      const resetWorker = registrations.find(reg => 
        reg.active?.scriptURL.includes('reset-worker') || 
        reg.active?.scriptURL.includes('sw.js')
      )
      
      if (resetWorker) {
        console.log('‚úÖ Service Worker found:')
        console.log('   üìù URL:', resetWorker.active?.scriptURL)
        console.log('   üìä State:', resetWorker.active?.state)
        console.log('   üíæ Can run in background: YES')
      } else {
        console.log('‚ö†Ô∏è No reset service worker found')
        console.log('   Background reset capability limited')
        console.log('   Reset will only work when browser is open')
      }
      
      // Check for cached reset flags
      if ('caches' in window) {
        const cache = await caches.open('reset-flags')
        const resetFlag = await cache.match('/reset-needed')
        if (resetFlag) {
          console.log('üì® Found pending background reset flag')
        }
      }
    } else {
      console.log('‚ùå Service Workers not supported in this browser')
      console.log('   Background reset will not work')
    }
    
    return true
  } catch (error) {
    console.error('‚ùå Error checking service worker:', error)
    return false
  }
}

/**
 * Test 4: Calculate next reset time
 */
function testNextResetCalculation() {
  console.log('\nüß™ TEST 4: Next Reset Calculation')
  console.log('-' .repeat(40))
  
  try {
    const resetSchedule = localStorage.getItem('resetSchedule')
    
    if (resetSchedule) {
      const schedule = JSON.parse(resetSchedule)
      const now = new Date()
      const [hours, minutes] = schedule.time.split(':').map(Number)
      
      const nextReset = new Date()
      nextReset.setHours(hours, minutes, 0, 0)
      
      if (nextReset <= now) {
        nextReset.setDate(nextReset.getDate() + 1)
      }
      
      const msUntilReset = nextReset.getTime() - now.getTime()
      const hoursUntil = Math.floor(msUntilReset / (1000 * 60 * 60))
      const minutesUntil = Math.floor((msUntilReset % (1000 * 60 * 60)) / (1000 * 60))
      
      console.log('‚è∞ Next reset scheduled:')
      console.log('   üìÖ Date:', nextReset.toLocaleString())
      console.log('   ‚åõ Time until:', `${hoursUntil}h ${minutesUntil}m`)
      
      if (hoursUntil < 1) {
        console.log('üéØ Reset happening soon! Watch for activity.')
      }
      
      window.resetSystemDiagnostic.results.nextReset = {
        timestamp: nextReset.toISOString(),
        hoursUntil,
        minutesUntil
      }
    } else {
      console.log('‚ùå Cannot calculate - no schedule found')
    }
    
    return true
  } catch (error) {
    console.error('‚ùå Error calculating next reset:', error)
    return false
  }
}

/**
 * Test 5: Manual reset trigger test
 */
async function testManualReset() {
  console.log('\nüß™ TEST 5: Manual Reset Trigger Test')
  console.log('-' .repeat(40))
  
  console.log('‚ö†Ô∏è This test will trigger an actual reset!')
  console.log('Only run this if you want to test the reset functionality.')
  console.log('')
  console.log('To run manual reset test:')
  console.log('1. Go to Team Management page')
  console.log('2. Click "Reset Now" button')
  console.log('3. Confirm the reset')
  console.log('4. Check console for reset activity')
  console.log('')
  console.log('Or run: triggerManualResetTest() in console')
  
  return true
}

/**
 * Trigger manual reset for testing
 */
window.triggerManualResetTest = async () => {
  console.log('üîÑ TRIGGERING MANUAL RESET TEST...')
  
  try {
    // Check if we're on a page with reset functionality
    if (typeof window.resetDailyData === 'function') {
      await window.resetDailyData()
      console.log('‚úÖ Manual reset test completed')
    } else {
      console.log('‚ùå Reset function not available on this page')
      console.log('Navigate to Team Management page and try again')
    }
  } catch (error) {
    console.error('‚ùå Manual reset test failed:', error)
  }
}

/**
 * Main diagnostic runner
 */
async function runAutomaticResetDiagnostic() {
  console.log('üîÑ Running comprehensive automatic reset diagnostic...')
  console.log('')
  
  const tests = [
    testResetManagerAvailability,
    testLastResetTimestamp,
    testServiceWorker,
    testNextResetCalculation,
    testManualReset
  ]
  
  let passedTests = 0
  
  for (const test of tests) {
    try {
      const result = await test()
      if (result) passedTests++
    } catch (error) {
      console.error('Test failed:', error)
    }
  }
  
  console.log('\nüìä DIAGNOSTIC SUMMARY')
  console.log('=' .repeat(50))
  console.log(`‚úÖ Tests completed: ${passedTests}/${tests.length}`)
  console.log('')
  
  // Recommendations
  console.log('üéØ RECOMMENDATIONS:')
  
  const schedule = window.resetSystemDiagnostic.results.schedule
  if (!schedule || !schedule.enabled) {
    console.log('‚Ä¢ Enable automatic reset in Team Management')
  }
  
  const lastReset = window.resetSystemDiagnostic.results.lastReset
  if (lastReset && lastReset.hoursAgo > 25) {
    console.log('‚Ä¢ Perform manual reset to catch up')
  }
  
  console.log('‚Ä¢ Visit Team Management page daily to ensure reset runs')
  console.log('‚Ä¢ Keep browser tab open during reset hours (3AM)')
  console.log('‚Ä¢ Monitor console for reset activity')
  console.log('‚Ä¢ End active shifts before reset time')
  
  return window.resetSystemDiagnostic.results
}

// Auto-run the diagnostic
runAutomaticResetDiagnostic()

// Make functions available globally
window.runAutomaticResetDiagnostic = runAutomaticResetDiagnostic
window.testResetManagerAvailability = testResetManagerAvailability
window.testLastResetTimestamp = testLastResetTimestamp
window.testServiceWorker = testServiceWorker
window.testNextResetCalculation = testNextResetCalculation
window.testManualReset = testManualReset
