/**
 * SECURE Firebase Security Rules for Multi-Tenant Data Isolation
 * CRITICAL: Prevents cross-tenant data access and enforces branch-level security
 */

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for security validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function getUserProfile() {
      return exists(/databases/$(database)/documents/users/$(getUserId())) ? 
        get(/databases/$(database)/documents/users/$(getUserId())).data : null;
    }
    
    function getUserTenantId() {
      let profile = getUserProfile();
      return profile != null ? profile.tenantId : null;
    }
    
    function isSameTenant(tenantId) {
      let userTenantId = getUserTenantId();
      return userTenantId != null && userTenantId == tenantId;
    }
    
    function isOwnerOrAdmin() {
      let profile = getUserProfile();
      return profile != null && (profile.role == 'owner' || profile.role == 'admin');
    }
    
    function hasValidTenant() {
      return getUserTenantId() != null;
    }
    
    // User profiles - users can only access their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && getUserId() == userId;
    }
    
    // TENANT-SCOPED DATA - Secure multi-tenant access
    match /tenants/{tenantId} {
      // Tenant document itself
      allow read: if isAuthenticated() && isSameTenant(tenantId);
      allow write: if isAuthenticated() && isSameTenant(tenantId) && isOwnerOrAdmin();
      
      // Inventory - tenant members only
      match /inventory/{itemId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // POS Orders - tenant members only
      match /posOrders/{orderId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // POS Items - tenant members only  
      match /posItems/{itemId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // Menu Items - tenant members only
      match /menuItems/{itemId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // Expenses - tenant members only
      match /expenses/{expenseId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // Purchase Orders - tenant members only
      match /purchaseOrders/{orderId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // Branches - tenant members only
      match /branches/{branchId} {
        allow read, write: if isAuthenticated() && isSameTenant(tenantId);
      }
      
      // Analytics - tenant members only
      match /analytics/{document=**} {
        allow read: if isAuthenticated() && isSameTenant(tenantId);
        allow write: if isAuthenticated() && isSameTenant(tenantId) && isOwnerOrAdmin();
      }
      
      // Settings - owners/admins only
      match /settings/{settingId} {
        allow read: if isAuthenticated() && isSameTenant(tenantId);
        allow write: if isAuthenticated() && isSameTenant(tenantId) && isOwnerOrAdmin();
      }
      
      // Team members - tenant access required
      match /teamMembers/{memberId} {
        allow read: if isAuthenticated() && isSameTenant(tenantId);
        allow write: if isAuthenticated() && isSameTenant(tenantId) && isOwnerOrAdmin();
      }
    }
    
    // Subscriptions - user can access their own subscription
    match /subscriptions/{subscriptionId} {
      allow read, write: if isAuthenticated() && hasValidTenant();
    }
    
    // Billing Plans - read-only for authenticated users
    match /billingPlans/{planId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can modify via server-side
    }
    
    // System collections - read-only
    match /system/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only server-side modifications
    }
    
    // DENY ALL OTHER ACCESS - NO WILDCARDS
    // This prevents any unauthorized access to unlisted collections
  }
}
